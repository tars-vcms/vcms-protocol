// Code generated by protoc-gen-go. DO NOT EDIT.
// source: id_generator.proto

package id_generator

import (
	context "context"
	fmt "fmt"
	tars "github.com/TarsCloud/TarsGo/tars"
	model "github.com/TarsCloud/TarsGo/tars/model"
	requestf "github.com/TarsCloud/TarsGo/tars/protocol/res/requestf"
	current "github.com/TarsCloud/TarsGo/tars/util/current"
	tools "github.com/TarsCloud/TarsGo/tars/util/tools"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GetWorkerIDRequest struct {
	// WorkerName 应用名，同类应用应保持一致
	WorkerName string `protobuf:"bytes,1,opt,name=WorkerName,proto3" json:"WorkerName,omitempty"`
	// OldWorkerID 重新申请应用ID时使用
	OldWorkerID          string   `protobuf:"bytes,2,opt,name=OldWorkerID,proto3" json:"OldWorkerID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetWorkerIDRequest) Reset()         { *m = GetWorkerIDRequest{} }
func (m *GetWorkerIDRequest) String() string { return proto.CompactTextString(m) }
func (*GetWorkerIDRequest) ProtoMessage()    {}
func (*GetWorkerIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d36cdb5f29ff29a, []int{0}
}

func (m *GetWorkerIDRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetWorkerIDRequest.Unmarshal(m, b)
}
func (m *GetWorkerIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetWorkerIDRequest.Marshal(b, m, deterministic)
}
func (m *GetWorkerIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetWorkerIDRequest.Merge(m, src)
}
func (m *GetWorkerIDRequest) XXX_Size() int {
	return xxx_messageInfo_GetWorkerIDRequest.Size(m)
}
func (m *GetWorkerIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetWorkerIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetWorkerIDRequest proto.InternalMessageInfo

func (m *GetWorkerIDRequest) GetWorkerName() string {
	if m != nil {
		return m.WorkerName
	}
	return ""
}

func (m *GetWorkerIDRequest) GetOldWorkerID() string {
	if m != nil {
		return m.OldWorkerID
	}
	return ""
}

type GetWorkerIDReply struct {
	WorkerID             int64    `protobuf:"varint,1,opt,name=WorkerID,proto3" json:"WorkerID,omitempty"`
	EffectiveTime        int64    `protobuf:"varint,2,opt,name=EffectiveTime,proto3" json:"EffectiveTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetWorkerIDReply) Reset()         { *m = GetWorkerIDReply{} }
func (m *GetWorkerIDReply) String() string { return proto.CompactTextString(m) }
func (*GetWorkerIDReply) ProtoMessage()    {}
func (*GetWorkerIDReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d36cdb5f29ff29a, []int{1}
}

func (m *GetWorkerIDReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetWorkerIDReply.Unmarshal(m, b)
}
func (m *GetWorkerIDReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetWorkerIDReply.Marshal(b, m, deterministic)
}
func (m *GetWorkerIDReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetWorkerIDReply.Merge(m, src)
}
func (m *GetWorkerIDReply) XXX_Size() int {
	return xxx_messageInfo_GetWorkerIDReply.Size(m)
}
func (m *GetWorkerIDReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetWorkerIDReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetWorkerIDReply proto.InternalMessageInfo

func (m *GetWorkerIDReply) GetWorkerID() int64 {
	if m != nil {
		return m.WorkerID
	}
	return 0
}

func (m *GetWorkerIDReply) GetEffectiveTime() int64 {
	if m != nil {
		return m.EffectiveTime
	}
	return 0
}

func init() {
	proto.RegisterType((*GetWorkerIDRequest)(nil), "tars_vcms.id_generator.GetWorkerIDRequest")
	proto.RegisterType((*GetWorkerIDReply)(nil), "tars_vcms.id_generator.GetWorkerIDReply")
}

func init() { proto.RegisterFile("id_generator.proto", fileDescriptor_8d36cdb5f29ff29a) }

var fileDescriptor_8d36cdb5f29ff29a = []byte{
	// 201 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xca, 0x4c, 0x89, 0x4f,
	0x4f, 0xcd, 0x4b, 0x2d, 0x4a, 0x2c, 0xc9, 0x2f, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12,
	0x2b, 0x49, 0x2c, 0x2a, 0x8e, 0x2f, 0x4b, 0xce, 0x2d, 0xd6, 0x43, 0x96, 0x55, 0x0a, 0xe3, 0x12,
	0x72, 0x4f, 0x2d, 0x09, 0xcf, 0x2f, 0xca, 0x4e, 0x2d, 0xf2, 0x74, 0x09, 0x4a, 0x2d, 0x2c, 0x4d,
	0x2d, 0x2e, 0x11, 0x92, 0xe3, 0xe2, 0x82, 0x08, 0xf9, 0x25, 0xe6, 0xa6, 0x4a, 0x30, 0x2a, 0x30,
	0x6a, 0x70, 0x06, 0x21, 0x89, 0x08, 0x29, 0x70, 0x71, 0xfb, 0xe7, 0xa4, 0xc0, 0x74, 0x49, 0x30,
	0x81, 0x15, 0x20, 0x0b, 0x29, 0x85, 0x70, 0x09, 0xa0, 0x98, 0x5b, 0x90, 0x53, 0x29, 0x24, 0xc5,
	0xc5, 0x01, 0xd7, 0x02, 0x32, 0x93, 0x39, 0x08, 0xce, 0x17, 0x52, 0xe1, 0xe2, 0x75, 0x4d, 0x4b,
	0x4b, 0x4d, 0x2e, 0xc9, 0x2c, 0x4b, 0x0d, 0xc9, 0xcc, 0x4d, 0x05, 0x9b, 0xc9, 0x1c, 0x84, 0x2a,
	0x68, 0x54, 0xc4, 0xc5, 0xed, 0xe9, 0xe2, 0x0e, 0x73, 0xbc, 0x50, 0x32, 0x17, 0x37, 0x92, 0x25,
	0x42, 0x5a, 0x7a, 0xd8, 0x3d, 0xa9, 0x87, 0xe9, 0x43, 0x29, 0x0d, 0xa2, 0xd4, 0x16, 0xe4, 0x54,
	0x3a, 0xf1, 0x45, 0xf1, 0x20, 0x2b, 0x48, 0x62, 0x03, 0x07, 0xa8, 0x31, 0x20, 0x00, 0x00, 0xff,
	0xff, 0x49, 0xae, 0x31, 0x71, 0x66, 0x01, 0x00, 0x00,
}

// This following code was generated by tarsrpc
// Gernerated from id_generator.proto
type IDGenerator struct {
	s model.Servant
}

//SetServant is required by the servant interface.
func (obj *IDGenerator) SetServant(s model.Servant) {
	obj.s = s
}

//AddServant is required by the servant interface
func (obj *IDGenerator) AddServant(imp impIDGenerator, objStr string) {
	tars.AddServant(obj, imp, objStr)
}

////AddServant adds servant  for the service with context
func (obj *IDGenerator) AddServantWithContext(imp impIDGeneratorWithContext, objStr string) {
	tars.AddServantWithContext(obj, imp, objStr)
}

//TarsSetTimeout is required by the servant interface. t is the timeout in ms.
func (obj *IDGenerator) TarsSetTimeout(t int) {
	obj.s.TarsSetTimeout(t)
}

//TarsSetProtocol is required by the servant interface. t is the protocol.
func (obj *IDGenerator) TarsSetProtocol(p model.Protocol) {
	obj.s.TarsSetProtocol(p)
}

type impIDGenerator interface {
	GetWorkerID(input GetWorkerIDRequest) (output GetWorkerIDReply, err error)
}

type impIDGeneratorWithContext interface {
	GetWorkerID(ctx context.Context, input GetWorkerIDRequest) (output GetWorkerIDReply, err error)
}

//Dispatch is used to call the user implement of the defined method.
func (obj *IDGenerator) Dispatch(ctx context.Context, val interface{}, req *requestf.RequestPacket, resp *requestf.ResponsePacket, withContext bool) (err error) {
	input := tools.Int8ToByte(req.SBuffer)
	var output []byte
	funcName := req.SFuncName
	switch funcName {

	case "GetWorkerID":
		inputDefine := GetWorkerIDRequest{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res GetWorkerIDReply
		if withContext == false {
			imp := val.(impIDGenerator)
			res, err = imp.GetWorkerID(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impIDGeneratorWithContext)
			res, err = imp.GetWorkerID(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	default:
		return fmt.Errorf("func mismatch")
	}
	var _status map[string]string
	s, ok := current.GetResponseStatus(ctx)
	if ok && s != nil {
		_status = s
	}
	var _context map[string]string
	c, ok := current.GetResponseContext(ctx)
	if ok && c != nil {
		_context = c
	}
	*resp = requestf.ResponsePacket{
		IVersion:     1,
		CPacketType:  0,
		IRequestId:   req.IRequestId,
		IMessageType: 0,
		IRet:         0,
		SBuffer:      tools.ByteToInt8(output),
		Status:       _status,
		SResultDesc:  "",
		Context:      _context,
	}
	return nil
}

// GetWorkerID is client rpc method as defined
func (obj *IDGenerator) GetWorkerID(input GetWorkerIDRequest, _opt ...map[string]string) (output GetWorkerIDReply, err error) {
	ctx := context.Background()
	return obj.GetWorkerIDWithContext(ctx, input, _opt...)
}

// GetWorkerIDWithContext is client rpc method as defined
func (obj *IDGenerator) GetWorkerIDWithContext(ctx context.Context, input GetWorkerIDRequest, _opt ...map[string]string) (output GetWorkerIDReply, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "GetWorkerID", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}
