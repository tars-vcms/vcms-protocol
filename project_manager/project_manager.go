// Package project_manager comment
// This file was generated by tars2go 1.1.4
// Generated from project_manager.tars
package project_manager

import (
	"fmt"

	"github.com/TarsCloud/TarsGo/tars/protocol/codec"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = fmt.Errorf
var _ = codec.FromInt8

type PROJECT_TYPE int32

const (
	PROJECT_TYPE_PLUGIN   = 0
	PROJECT_TYPE_BUSINESS = 1
	PROJECT_TYPE_PLATFORM = 2
)

type PROJECT_VISIBILITY int32

const (
	PROJECT_VISIBILITY_PRODUCT_OWNER      = 0
	PROJECT_VISIBILITY_PUBLIC             = 1
	PROJECT_VISIBILITY_HAVE_AUTHORIZATION = 2
)

type PLUGIN_STATUS int32

const (
	PLUGIN_STATUS_ENABLED  = 0
	PLUGIN_STATUS_DISABLED = 1
)

// ProjectPlugin struct implement
type ProjectPlugin struct {
	ProjectID  int64             `json:"ProjectID"`
	PluginID   int64             `json:"PluginID"`
	PluginInfo map[string]string `json:"PluginInfo"`
}

func (st *ProjectPlugin) ResetDefault() {
}

//ReadFrom reads  from _is and put into struct.
func (st *ProjectPlugin) ReadFrom(_is *codec.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.ResetDefault()

	err = _is.Read_int64(&st.ProjectID, 0, true)
	if err != nil {
		return err
	}

	err = _is.Read_int64(&st.PluginID, 1, true)
	if err != nil {
		return err
	}

	err, have = _is.SkipTo(codec.MAP, 2, true)
	if err != nil {
		return err
	}

	err = _is.Read_int32(&length, 0, true)
	if err != nil {
		return err
	}

	st.PluginInfo = make(map[string]string)
	for i0, e0 := int32(0), length; i0 < e0; i0++ {
		var k0 string
		var v0 string

		err = _is.Read_string(&k0, 0, false)
		if err != nil {
			return err
		}

		err = _is.Read_string(&v0, 1, false)
		if err != nil {
			return err
		}

		st.PluginInfo[k0] = v0
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

//ReadBlock reads struct from the given tag , require or optional.
func (st *ProjectPlugin) ReadBlock(_is *codec.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.ResetDefault()

	err, have = _is.SkipTo(codec.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require ProjectPlugin, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(_is)
	if err != nil {
		return err
	}

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

//WriteTo encode struct to buffer
func (st *ProjectPlugin) WriteTo(_os *codec.Buffer) error {
	var err error

	err = _os.Write_int64(st.ProjectID, 0)
	if err != nil {
		return err
	}

	err = _os.Write_int64(st.PluginID, 1)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.MAP, 2)
	if err != nil {
		return err
	}

	err = _os.Write_int32(int32(len(st.PluginInfo)), 0)
	if err != nil {
		return err
	}

	for k1, v1 := range st.PluginInfo {

		err = _os.Write_string(k1, 0)
		if err != nil {
			return err
		}

		err = _os.Write_string(v1, 1)
		if err != nil {
			return err
		}

	}

	_ = err

	return nil
}

//WriteBlock encode struct
func (st *ProjectPlugin) WriteBlock(_os *codec.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(codec.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(_os)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.STRUCT_END, 0)
	if err != nil {
		return err
	}
	return nil
}

// Project struct implement
type Project struct {
	ID           int64              `json:"ID"`
	Name         string             `json:"Name"`
	Visibility   PROJECT_VISIBILITY `json:"Visibility"`
	Type         PROJECT_TYPE       `json:"Type"`
	DevelopersID []int64            `json:"DevelopersID"`
	PMsID        []int64            `json:"PMsID"`
	Plugins      []ProjectPlugin    `json:"Plugins"`
	CreatedAt    int64              `json:"CreatedAt"`
}

func (st *Project) ResetDefault() {
}

//ReadFrom reads  from _is and put into struct.
func (st *Project) ReadFrom(_is *codec.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.ResetDefault()

	err = _is.Read_int64(&st.ID, 0, true)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Name, 1, true)
	if err != nil {
		return err
	}

	err = _is.Read_int32((*int32)(&st.Visibility), 2, true)
	if err != nil {
		return err
	}

	err = _is.Read_int32((*int32)(&st.Type), 3, true)
	if err != nil {
		return err
	}

	err, have, ty = _is.SkipToNoCheck(4, true)
	if err != nil {
		return err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return err
		}

		st.DevelopersID = make([]int64, length)
		for i0, e0 := int32(0), length; i0 < e0; i0++ {

			err = _is.Read_int64(&st.DevelopersID[i0], 0, false)
			if err != nil {
				return err
			}

		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("not support simple_list type")
		if err != nil {
			return err
		}

	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return err
		}

	}

	err, have, ty = _is.SkipToNoCheck(5, true)
	if err != nil {
		return err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return err
		}

		st.PMsID = make([]int64, length)
		for i1, e1 := int32(0), length; i1 < e1; i1++ {

			err = _is.Read_int64(&st.PMsID[i1], 0, false)
			if err != nil {
				return err
			}

		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("not support simple_list type")
		if err != nil {
			return err
		}

	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return err
		}

	}

	err, have, ty = _is.SkipToNoCheck(6, true)
	if err != nil {
		return err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return err
		}

		st.Plugins = make([]ProjectPlugin, length)
		for i2, e2 := int32(0), length; i2 < e2; i2++ {

			err = st.Plugins[i2].ReadBlock(_is, 0, false)
			if err != nil {
				return err
			}

		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("not support simple_list type")
		if err != nil {
			return err
		}

	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return err
		}

	}

	err = _is.Read_int64(&st.CreatedAt, 7, true)
	if err != nil {
		return err
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

//ReadBlock reads struct from the given tag , require or optional.
func (st *Project) ReadBlock(_is *codec.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.ResetDefault()

	err, have = _is.SkipTo(codec.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require Project, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(_is)
	if err != nil {
		return err
	}

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

//WriteTo encode struct to buffer
func (st *Project) WriteTo(_os *codec.Buffer) error {
	var err error

	err = _os.Write_int64(st.ID, 0)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Name, 1)
	if err != nil {
		return err
	}

	err = _os.Write_int32(int32(st.Visibility), 2)
	if err != nil {
		return err
	}

	err = _os.Write_int32(int32(st.Type), 3)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.LIST, 4)
	if err != nil {
		return err
	}

	err = _os.Write_int32(int32(len(st.DevelopersID)), 0)
	if err != nil {
		return err
	}

	for _, v := range st.DevelopersID {

		err = _os.Write_int64(v, 0)
		if err != nil {
			return err
		}

	}

	err = _os.WriteHead(codec.LIST, 5)
	if err != nil {
		return err
	}

	err = _os.Write_int32(int32(len(st.PMsID)), 0)
	if err != nil {
		return err
	}

	for _, v := range st.PMsID {

		err = _os.Write_int64(v, 0)
		if err != nil {
			return err
		}

	}

	err = _os.WriteHead(codec.LIST, 6)
	if err != nil {
		return err
	}

	err = _os.Write_int32(int32(len(st.Plugins)), 0)
	if err != nil {
		return err
	}

	for _, v := range st.Plugins {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return err
		}

	}

	err = _os.Write_int64(st.CreatedAt, 7)
	if err != nil {
		return err
	}

	_ = err

	return nil
}

//WriteBlock encode struct
func (st *Project) WriteBlock(_os *codec.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(codec.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(_os)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.STRUCT_END, 0)
	if err != nil {
		return err
	}
	return nil
}

// CreateProjectRequest struct implement
type CreateProjectRequest struct {
	Name    string       `json:"Name"`
	StaffID int64        `json:"StaffID"`
	Type    PROJECT_TYPE `json:"Type"`
}

func (st *CreateProjectRequest) ResetDefault() {
}

//ReadFrom reads  from _is and put into struct.
func (st *CreateProjectRequest) ReadFrom(_is *codec.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.ResetDefault()

	err = _is.Read_string(&st.Name, 0, true)
	if err != nil {
		return err
	}

	err = _is.Read_int64(&st.StaffID, 1, true)
	if err != nil {
		return err
	}

	err = _is.Read_int32((*int32)(&st.Type), 2, true)
	if err != nil {
		return err
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

//ReadBlock reads struct from the given tag , require or optional.
func (st *CreateProjectRequest) ReadBlock(_is *codec.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.ResetDefault()

	err, have = _is.SkipTo(codec.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require CreateProjectRequest, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(_is)
	if err != nil {
		return err
	}

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

//WriteTo encode struct to buffer
func (st *CreateProjectRequest) WriteTo(_os *codec.Buffer) error {
	var err error

	err = _os.Write_string(st.Name, 0)
	if err != nil {
		return err
	}

	err = _os.Write_int64(st.StaffID, 1)
	if err != nil {
		return err
	}

	err = _os.Write_int32(int32(st.Type), 2)
	if err != nil {
		return err
	}

	_ = err

	return nil
}

//WriteBlock encode struct
func (st *CreateProjectRequest) WriteBlock(_os *codec.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(codec.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(_os)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.STRUCT_END, 0)
	if err != nil {
		return err
	}
	return nil
}

// CreateProjectReply struct implement
type CreateProjectReply struct {
	Project Project `json:"Project"`
}

func (st *CreateProjectReply) ResetDefault() {
	st.Project.ResetDefault()
}

//ReadFrom reads  from _is and put into struct.
func (st *CreateProjectReply) ReadFrom(_is *codec.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.ResetDefault()

	err = st.Project.ReadBlock(_is, 0, true)
	if err != nil {
		return err
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

//ReadBlock reads struct from the given tag , require or optional.
func (st *CreateProjectReply) ReadBlock(_is *codec.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.ResetDefault()

	err, have = _is.SkipTo(codec.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require CreateProjectReply, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(_is)
	if err != nil {
		return err
	}

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

//WriteTo encode struct to buffer
func (st *CreateProjectReply) WriteTo(_os *codec.Buffer) error {
	var err error

	err = st.Project.WriteBlock(_os, 0)
	if err != nil {
		return err
	}

	_ = err

	return nil
}

//WriteBlock encode struct
func (st *CreateProjectReply) WriteBlock(_os *codec.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(codec.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(_os)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.STRUCT_END, 0)
	if err != nil {
		return err
	}
	return nil
}

// DeleteProjectRequest struct implement
type DeleteProjectRequest struct {
	ProjectID int64  `json:"ProjectID"`
	StaffID   int64  `json:"StaffID"`
	Reason    string `json:"Reason"`
}

func (st *DeleteProjectRequest) ResetDefault() {
}

//ReadFrom reads  from _is and put into struct.
func (st *DeleteProjectRequest) ReadFrom(_is *codec.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.ResetDefault()

	err = _is.Read_int64(&st.ProjectID, 0, true)
	if err != nil {
		return err
	}

	err = _is.Read_int64(&st.StaffID, 1, true)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Reason, 2, true)
	if err != nil {
		return err
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

//ReadBlock reads struct from the given tag , require or optional.
func (st *DeleteProjectRequest) ReadBlock(_is *codec.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.ResetDefault()

	err, have = _is.SkipTo(codec.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require DeleteProjectRequest, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(_is)
	if err != nil {
		return err
	}

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

//WriteTo encode struct to buffer
func (st *DeleteProjectRequest) WriteTo(_os *codec.Buffer) error {
	var err error

	err = _os.Write_int64(st.ProjectID, 0)
	if err != nil {
		return err
	}

	err = _os.Write_int64(st.StaffID, 1)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Reason, 2)
	if err != nil {
		return err
	}

	_ = err

	return nil
}

//WriteBlock encode struct
func (st *DeleteProjectRequest) WriteBlock(_os *codec.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(codec.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(_os)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.STRUCT_END, 0)
	if err != nil {
		return err
	}
	return nil
}

// DeleteProjectReply struct implement
type DeleteProjectReply struct {
}

func (st *DeleteProjectReply) ResetDefault() {
}

//ReadFrom reads  from _is and put into struct.
func (st *DeleteProjectReply) ReadFrom(_is *codec.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.ResetDefault()

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

//ReadBlock reads struct from the given tag , require or optional.
func (st *DeleteProjectReply) ReadBlock(_is *codec.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.ResetDefault()

	err, have = _is.SkipTo(codec.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require DeleteProjectReply, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(_is)
	if err != nil {
		return err
	}

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

//WriteTo encode struct to buffer
func (st *DeleteProjectReply) WriteTo(_os *codec.Buffer) error {
	var err error

	_ = err

	return nil
}

//WriteBlock encode struct
func (st *DeleteProjectReply) WriteBlock(_os *codec.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(codec.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(_os)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.STRUCT_END, 0)
	if err != nil {
		return err
	}
	return nil
}

// GetProjectsRequest struct implement
type GetProjectsRequest struct {
	StaffID    int64   `json:"StaffID"`
	ProjectsID []int64 `json:"ProjectsID"`
}

func (st *GetProjectsRequest) ResetDefault() {
}

//ReadFrom reads  from _is and put into struct.
func (st *GetProjectsRequest) ReadFrom(_is *codec.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.ResetDefault()

	err = _is.Read_int64(&st.StaffID, 0, false)
	if err != nil {
		return err
	}

	err, have, ty = _is.SkipToNoCheck(1, false)
	if err != nil {
		return err
	}

	if have {
		if ty == codec.LIST {
			err = _is.Read_int32(&length, 0, true)
			if err != nil {
				return err
			}

			st.ProjectsID = make([]int64, length)
			for i0, e0 := int32(0), length; i0 < e0; i0++ {

				err = _is.Read_int64(&st.ProjectsID[i0], 0, false)
				if err != nil {
					return err
				}

			}
		} else if ty == codec.SIMPLE_LIST {
			err = fmt.Errorf("not support simple_list type")
			if err != nil {
				return err
			}

		} else {
			err = fmt.Errorf("require vector, but not")
			if err != nil {
				return err
			}

		}
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

//ReadBlock reads struct from the given tag , require or optional.
func (st *GetProjectsRequest) ReadBlock(_is *codec.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.ResetDefault()

	err, have = _is.SkipTo(codec.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require GetProjectsRequest, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(_is)
	if err != nil {
		return err
	}

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

//WriteTo encode struct to buffer
func (st *GetProjectsRequest) WriteTo(_os *codec.Buffer) error {
	var err error

	err = _os.Write_int64(st.StaffID, 0)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.LIST, 1)
	if err != nil {
		return err
	}

	err = _os.Write_int32(int32(len(st.ProjectsID)), 0)
	if err != nil {
		return err
	}

	for _, v := range st.ProjectsID {

		err = _os.Write_int64(v, 0)
		if err != nil {
			return err
		}

	}

	_ = err

	return nil
}

//WriteBlock encode struct
func (st *GetProjectsRequest) WriteBlock(_os *codec.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(codec.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(_os)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.STRUCT_END, 0)
	if err != nil {
		return err
	}
	return nil
}

// GetProjectsReply struct implement
type GetProjectsReply struct {
	Projects []Project `json:"Projects"`
}

func (st *GetProjectsReply) ResetDefault() {
}

//ReadFrom reads  from _is and put into struct.
func (st *GetProjectsReply) ReadFrom(_is *codec.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.ResetDefault()

	err, have, ty = _is.SkipToNoCheck(0, true)
	if err != nil {
		return err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return err
		}

		st.Projects = make([]Project, length)
		for i0, e0 := int32(0), length; i0 < e0; i0++ {

			err = st.Projects[i0].ReadBlock(_is, 0, false)
			if err != nil {
				return err
			}

		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("not support simple_list type")
		if err != nil {
			return err
		}

	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return err
		}

	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

//ReadBlock reads struct from the given tag , require or optional.
func (st *GetProjectsReply) ReadBlock(_is *codec.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.ResetDefault()

	err, have = _is.SkipTo(codec.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require GetProjectsReply, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(_is)
	if err != nil {
		return err
	}

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

//WriteTo encode struct to buffer
func (st *GetProjectsReply) WriteTo(_os *codec.Buffer) error {
	var err error

	err = _os.WriteHead(codec.LIST, 0)
	if err != nil {
		return err
	}

	err = _os.Write_int32(int32(len(st.Projects)), 0)
	if err != nil {
		return err
	}

	for _, v := range st.Projects {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return err
		}

	}

	_ = err

	return nil
}

//WriteBlock encode struct
func (st *GetProjectsReply) WriteBlock(_os *codec.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(codec.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(_os)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.STRUCT_END, 0)
	if err != nil {
		return err
	}
	return nil
}

// SetProjectStaffRequest struct implement
type SetProjectStaffRequest struct {
	StaffID      int64   `json:"StaffID"`
	DevelopersID []int64 `json:"DevelopersID"`
	PMsID        []int64 `json:"PMsID"`
}

func (st *SetProjectStaffRequest) ResetDefault() {
}

//ReadFrom reads  from _is and put into struct.
func (st *SetProjectStaffRequest) ReadFrom(_is *codec.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.ResetDefault()

	err = _is.Read_int64(&st.StaffID, 0, true)
	if err != nil {
		return err
	}

	err, have, ty = _is.SkipToNoCheck(1, true)
	if err != nil {
		return err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return err
		}

		st.DevelopersID = make([]int64, length)
		for i0, e0 := int32(0), length; i0 < e0; i0++ {

			err = _is.Read_int64(&st.DevelopersID[i0], 0, false)
			if err != nil {
				return err
			}

		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("not support simple_list type")
		if err != nil {
			return err
		}

	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return err
		}

	}

	err, have, ty = _is.SkipToNoCheck(2, true)
	if err != nil {
		return err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return err
		}

		st.PMsID = make([]int64, length)
		for i1, e1 := int32(0), length; i1 < e1; i1++ {

			err = _is.Read_int64(&st.PMsID[i1], 0, false)
			if err != nil {
				return err
			}

		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("not support simple_list type")
		if err != nil {
			return err
		}

	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return err
		}

	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

//ReadBlock reads struct from the given tag , require or optional.
func (st *SetProjectStaffRequest) ReadBlock(_is *codec.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.ResetDefault()

	err, have = _is.SkipTo(codec.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require SetProjectStaffRequest, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(_is)
	if err != nil {
		return err
	}

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

//WriteTo encode struct to buffer
func (st *SetProjectStaffRequest) WriteTo(_os *codec.Buffer) error {
	var err error

	err = _os.Write_int64(st.StaffID, 0)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.LIST, 1)
	if err != nil {
		return err
	}

	err = _os.Write_int32(int32(len(st.DevelopersID)), 0)
	if err != nil {
		return err
	}

	for _, v := range st.DevelopersID {

		err = _os.Write_int64(v, 0)
		if err != nil {
			return err
		}

	}

	err = _os.WriteHead(codec.LIST, 2)
	if err != nil {
		return err
	}

	err = _os.Write_int32(int32(len(st.PMsID)), 0)
	if err != nil {
		return err
	}

	for _, v := range st.PMsID {

		err = _os.Write_int64(v, 0)
		if err != nil {
			return err
		}

	}

	_ = err

	return nil
}

//WriteBlock encode struct
func (st *SetProjectStaffRequest) WriteBlock(_os *codec.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(codec.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(_os)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.STRUCT_END, 0)
	if err != nil {
		return err
	}
	return nil
}

// SetProjectStaffReply struct implement
type SetProjectStaffReply struct {
}

func (st *SetProjectStaffReply) ResetDefault() {
}

//ReadFrom reads  from _is and put into struct.
func (st *SetProjectStaffReply) ReadFrom(_is *codec.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.ResetDefault()

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

//ReadBlock reads struct from the given tag , require or optional.
func (st *SetProjectStaffReply) ReadBlock(_is *codec.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.ResetDefault()

	err, have = _is.SkipTo(codec.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require SetProjectStaffReply, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(_is)
	if err != nil {
		return err
	}

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

//WriteTo encode struct to buffer
func (st *SetProjectStaffReply) WriteTo(_os *codec.Buffer) error {
	var err error

	_ = err

	return nil
}

//WriteBlock encode struct
func (st *SetProjectStaffReply) WriteBlock(_os *codec.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(codec.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(_os)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.STRUCT_END, 0)
	if err != nil {
		return err
	}
	return nil
}

// SetProjectPluginRequest struct implement
type SetProjectPluginRequest struct {
	ProjectID  int64             `json:"ProjectID"`
	Status     PLUGIN_STATUS     `json:"Status"`
	StaffID    int64             `json:"StaffID"`
	PluginInfo map[string]string `json:"PluginInfo"`
}

func (st *SetProjectPluginRequest) ResetDefault() {
}

//ReadFrom reads  from _is and put into struct.
func (st *SetProjectPluginRequest) ReadFrom(_is *codec.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.ResetDefault()

	err = _is.Read_int64(&st.ProjectID, 0, true)
	if err != nil {
		return err
	}

	err = _is.Read_int32((*int32)(&st.Status), 1, true)
	if err != nil {
		return err
	}

	err = _is.Read_int64(&st.StaffID, 2, true)
	if err != nil {
		return err
	}

	err, have = _is.SkipTo(codec.MAP, 3, true)
	if err != nil {
		return err
	}

	err = _is.Read_int32(&length, 0, true)
	if err != nil {
		return err
	}

	st.PluginInfo = make(map[string]string)
	for i0, e0 := int32(0), length; i0 < e0; i0++ {
		var k0 string
		var v0 string

		err = _is.Read_string(&k0, 0, false)
		if err != nil {
			return err
		}

		err = _is.Read_string(&v0, 1, false)
		if err != nil {
			return err
		}

		st.PluginInfo[k0] = v0
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

//ReadBlock reads struct from the given tag , require or optional.
func (st *SetProjectPluginRequest) ReadBlock(_is *codec.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.ResetDefault()

	err, have = _is.SkipTo(codec.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require SetProjectPluginRequest, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(_is)
	if err != nil {
		return err
	}

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

//WriteTo encode struct to buffer
func (st *SetProjectPluginRequest) WriteTo(_os *codec.Buffer) error {
	var err error

	err = _os.Write_int64(st.ProjectID, 0)
	if err != nil {
		return err
	}

	err = _os.Write_int32(int32(st.Status), 1)
	if err != nil {
		return err
	}

	err = _os.Write_int64(st.StaffID, 2)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.MAP, 3)
	if err != nil {
		return err
	}

	err = _os.Write_int32(int32(len(st.PluginInfo)), 0)
	if err != nil {
		return err
	}

	for k1, v1 := range st.PluginInfo {

		err = _os.Write_string(k1, 0)
		if err != nil {
			return err
		}

		err = _os.Write_string(v1, 1)
		if err != nil {
			return err
		}

	}

	_ = err

	return nil
}

//WriteBlock encode struct
func (st *SetProjectPluginRequest) WriteBlock(_os *codec.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(codec.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(_os)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.STRUCT_END, 0)
	if err != nil {
		return err
	}
	return nil
}

// SetProjectPluginReply struct implement
type SetProjectPluginReply struct {
}

func (st *SetProjectPluginReply) ResetDefault() {
}

//ReadFrom reads  from _is and put into struct.
func (st *SetProjectPluginReply) ReadFrom(_is *codec.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.ResetDefault()

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

//ReadBlock reads struct from the given tag , require or optional.
func (st *SetProjectPluginReply) ReadBlock(_is *codec.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.ResetDefault()

	err, have = _is.SkipTo(codec.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require SetProjectPluginReply, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(_is)
	if err != nil {
		return err
	}

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

//WriteTo encode struct to buffer
func (st *SetProjectPluginReply) WriteTo(_os *codec.Buffer) error {
	var err error

	_ = err

	return nil
}

//WriteBlock encode struct
func (st *SetProjectPluginReply) WriteBlock(_os *codec.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(codec.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(_os)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.STRUCT_END, 0)
	if err != nil {
		return err
	}
	return nil
}
