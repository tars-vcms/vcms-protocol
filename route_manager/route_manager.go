// Package route_manager comment
// This file was generated by tars2go 1.1.4
// Generated from route_manager.tars
package route_manager

import (
	"fmt"

	"github.com/TarsCloud/TarsGo/tars/protocol/codec"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = fmt.Errorf
var _ = codec.FromInt8

type SERVANT_TYPE int32

const (
	SERVANT_TYPE_TARS_SERVANT          = 0
	SERVANT_TYPE_RESERVE_PROXY_SERVANT = 1
	SERVANT_TYPE_DICTIONARY_SERVANT    = 2
)

// RouteTable struct implement
type RouteTable struct {
	RouteTableID       int64        `json:"RouteTableID"`
	Path               string       `json:"Path"`
	ServantName        string       `json:"ServantName"`
	FuncName           string       `json:"FuncName"`
	InputName          string       `json:"InputName"`
	OutputName         string       `json:"OutputName"`
	Type               SERVANT_TYPE `json:"Type"`
	AuthID             int64        `json:"AuthID"`
	TransparentHeaders []string     `json:"TransparentHeaders"`
	Children           []RouteTable `json:"Children"`
}

func (st *RouteTable) ResetDefault() {
}

//ReadFrom reads  from _is and put into struct.
func (st *RouteTable) ReadFrom(_is *codec.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.ResetDefault()

	err = _is.Read_int64(&st.RouteTableID, 0, true)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Path, 1, true)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.ServantName, 2, true)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.FuncName, 3, true)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.InputName, 4, true)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.OutputName, 5, true)
	if err != nil {
		return err
	}

	err = _is.Read_int32((*int32)(&st.Type), 6, true)
	if err != nil {
		return err
	}

	err = _is.Read_int64(&st.AuthID, 7, false)
	if err != nil {
		return err
	}

	err, have, ty = _is.SkipToNoCheck(8, true)
	if err != nil {
		return err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return err
		}

		st.TransparentHeaders = make([]string, length)
		for i0, e0 := int32(0), length; i0 < e0; i0++ {

			err = _is.Read_string(&st.TransparentHeaders[i0], 0, false)
			if err != nil {
				return err
			}

		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("not support simple_list type")
		if err != nil {
			return err
		}

	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return err
		}

	}

	err, have, ty = _is.SkipToNoCheck(9, false)
	if err != nil {
		return err
	}

	if have {
		if ty == codec.LIST {
			err = _is.Read_int32(&length, 0, true)
			if err != nil {
				return err
			}

			st.Children = make([]RouteTable, length)
			for i1, e1 := int32(0), length; i1 < e1; i1++ {

				err = st.Children[i1].ReadBlock(_is, 0, false)
				if err != nil {
					return err
				}

			}
		} else if ty == codec.SIMPLE_LIST {
			err = fmt.Errorf("not support simple_list type")
			if err != nil {
				return err
			}

		} else {
			err = fmt.Errorf("require vector, but not")
			if err != nil {
				return err
			}

		}
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

//ReadBlock reads struct from the given tag , require or optional.
func (st *RouteTable) ReadBlock(_is *codec.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.ResetDefault()

	err, have = _is.SkipTo(codec.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require RouteTable, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(_is)
	if err != nil {
		return err
	}

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

//WriteTo encode struct to buffer
func (st *RouteTable) WriteTo(_os *codec.Buffer) error {
	var err error

	err = _os.Write_int64(st.RouteTableID, 0)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Path, 1)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.ServantName, 2)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.FuncName, 3)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.InputName, 4)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.OutputName, 5)
	if err != nil {
		return err
	}

	err = _os.Write_int32(int32(st.Type), 6)
	if err != nil {
		return err
	}

	err = _os.Write_int64(st.AuthID, 7)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.LIST, 8)
	if err != nil {
		return err
	}

	err = _os.Write_int32(int32(len(st.TransparentHeaders)), 0)
	if err != nil {
		return err
	}

	for _, v := range st.TransparentHeaders {

		err = _os.Write_string(v, 0)
		if err != nil {
			return err
		}

	}

	err = _os.WriteHead(codec.LIST, 9)
	if err != nil {
		return err
	}

	err = _os.Write_int32(int32(len(st.Children)), 0)
	if err != nil {
		return err
	}

	for _, v := range st.Children {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return err
		}

	}

	_ = err

	return nil
}

//WriteBlock encode struct
func (st *RouteTable) WriteBlock(_os *codec.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(codec.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(_os)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.STRUCT_END, 0)
	if err != nil {
		return err
	}
	return nil
}

// Route struct implement
type Route struct {
	RouteID   int64  `json:"RouteID"`
	RouteName string `json:"RouteName"`
	GatewayID int64  `json:"GatewayID"`
}

func (st *Route) ResetDefault() {
}

//ReadFrom reads  from _is and put into struct.
func (st *Route) ReadFrom(_is *codec.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.ResetDefault()

	err = _is.Read_int64(&st.RouteID, 0, true)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.RouteName, 1, true)
	if err != nil {
		return err
	}

	err = _is.Read_int64(&st.GatewayID, 2, true)
	if err != nil {
		return err
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

//ReadBlock reads struct from the given tag , require or optional.
func (st *Route) ReadBlock(_is *codec.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.ResetDefault()

	err, have = _is.SkipTo(codec.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require Route, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(_is)
	if err != nil {
		return err
	}

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

//WriteTo encode struct to buffer
func (st *Route) WriteTo(_os *codec.Buffer) error {
	var err error

	err = _os.Write_int64(st.RouteID, 0)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.RouteName, 1)
	if err != nil {
		return err
	}

	err = _os.Write_int64(st.GatewayID, 2)
	if err != nil {
		return err
	}

	_ = err

	return nil
}

//WriteBlock encode struct
func (st *Route) WriteBlock(_os *codec.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(codec.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(_os)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.STRUCT_END, 0)
	if err != nil {
		return err
	}
	return nil
}

// Gateway struct implement
type Gateway struct {
	GatewayID   int64  `json:"GatewayID"`
	GatewayName string `json:"GatewayName"`
}

func (st *Gateway) ResetDefault() {
}

//ReadFrom reads  from _is and put into struct.
func (st *Gateway) ReadFrom(_is *codec.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.ResetDefault()

	err = _is.Read_int64(&st.GatewayID, 0, true)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.GatewayName, 1, true)
	if err != nil {
		return err
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

//ReadBlock reads struct from the given tag , require or optional.
func (st *Gateway) ReadBlock(_is *codec.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.ResetDefault()

	err, have = _is.SkipTo(codec.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require Gateway, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(_is)
	if err != nil {
		return err
	}

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

//WriteTo encode struct to buffer
func (st *Gateway) WriteTo(_os *codec.Buffer) error {
	var err error

	err = _os.Write_int64(st.GatewayID, 0)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.GatewayName, 1)
	if err != nil {
		return err
	}

	_ = err

	return nil
}

//WriteBlock encode struct
func (st *Gateway) WriteBlock(_os *codec.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(codec.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(_os)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.STRUCT_END, 0)
	if err != nil {
		return err
	}
	return nil
}

// CreateGatewayRequest struct implement
type CreateGatewayRequest struct {
	Name string `json:"Name"`
}

func (st *CreateGatewayRequest) ResetDefault() {
}

//ReadFrom reads  from _is and put into struct.
func (st *CreateGatewayRequest) ReadFrom(_is *codec.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.ResetDefault()

	err = _is.Read_string(&st.Name, 0, true)
	if err != nil {
		return err
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

//ReadBlock reads struct from the given tag , require or optional.
func (st *CreateGatewayRequest) ReadBlock(_is *codec.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.ResetDefault()

	err, have = _is.SkipTo(codec.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require CreateGatewayRequest, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(_is)
	if err != nil {
		return err
	}

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

//WriteTo encode struct to buffer
func (st *CreateGatewayRequest) WriteTo(_os *codec.Buffer) error {
	var err error

	err = _os.Write_string(st.Name, 0)
	if err != nil {
		return err
	}

	_ = err

	return nil
}

//WriteBlock encode struct
func (st *CreateGatewayRequest) WriteBlock(_os *codec.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(codec.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(_os)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.STRUCT_END, 0)
	if err != nil {
		return err
	}
	return nil
}

// CreateGatewayReply struct implement
type CreateGatewayReply struct {
}

func (st *CreateGatewayReply) ResetDefault() {
}

//ReadFrom reads  from _is and put into struct.
func (st *CreateGatewayReply) ReadFrom(_is *codec.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.ResetDefault()

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

//ReadBlock reads struct from the given tag , require or optional.
func (st *CreateGatewayReply) ReadBlock(_is *codec.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.ResetDefault()

	err, have = _is.SkipTo(codec.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require CreateGatewayReply, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(_is)
	if err != nil {
		return err
	}

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

//WriteTo encode struct to buffer
func (st *CreateGatewayReply) WriteTo(_os *codec.Buffer) error {
	var err error

	_ = err

	return nil
}

//WriteBlock encode struct
func (st *CreateGatewayReply) WriteBlock(_os *codec.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(codec.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(_os)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.STRUCT_END, 0)
	if err != nil {
		return err
	}
	return nil
}

// GetGatewaysRequest struct implement
type GetGatewaysRequest struct {
	Name string `json:"Name"`
}

func (st *GetGatewaysRequest) ResetDefault() {
}

//ReadFrom reads  from _is and put into struct.
func (st *GetGatewaysRequest) ReadFrom(_is *codec.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.ResetDefault()

	err = _is.Read_string(&st.Name, 0, true)
	if err != nil {
		return err
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

//ReadBlock reads struct from the given tag , require or optional.
func (st *GetGatewaysRequest) ReadBlock(_is *codec.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.ResetDefault()

	err, have = _is.SkipTo(codec.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require GetGatewaysRequest, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(_is)
	if err != nil {
		return err
	}

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

//WriteTo encode struct to buffer
func (st *GetGatewaysRequest) WriteTo(_os *codec.Buffer) error {
	var err error

	err = _os.Write_string(st.Name, 0)
	if err != nil {
		return err
	}

	_ = err

	return nil
}

//WriteBlock encode struct
func (st *GetGatewaysRequest) WriteBlock(_os *codec.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(codec.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(_os)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.STRUCT_END, 0)
	if err != nil {
		return err
	}
	return nil
}

// GetGatewaysReply struct implement
type GetGatewaysReply struct {
	Gateway []Gateway `json:"Gateway"`
}

func (st *GetGatewaysReply) ResetDefault() {
}

//ReadFrom reads  from _is and put into struct.
func (st *GetGatewaysReply) ReadFrom(_is *codec.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.ResetDefault()

	err, have, ty = _is.SkipToNoCheck(0, true)
	if err != nil {
		return err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return err
		}

		st.Gateway = make([]Gateway, length)
		for i0, e0 := int32(0), length; i0 < e0; i0++ {

			err = st.Gateway[i0].ReadBlock(_is, 0, false)
			if err != nil {
				return err
			}

		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("not support simple_list type")
		if err != nil {
			return err
		}

	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return err
		}

	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

//ReadBlock reads struct from the given tag , require or optional.
func (st *GetGatewaysReply) ReadBlock(_is *codec.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.ResetDefault()

	err, have = _is.SkipTo(codec.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require GetGatewaysReply, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(_is)
	if err != nil {
		return err
	}

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

//WriteTo encode struct to buffer
func (st *GetGatewaysReply) WriteTo(_os *codec.Buffer) error {
	var err error

	err = _os.WriteHead(codec.LIST, 0)
	if err != nil {
		return err
	}

	err = _os.Write_int32(int32(len(st.Gateway)), 0)
	if err != nil {
		return err
	}

	for _, v := range st.Gateway {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return err
		}

	}

	_ = err

	return nil
}

//WriteBlock encode struct
func (st *GetGatewaysReply) WriteBlock(_os *codec.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(codec.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(_os)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.STRUCT_END, 0)
	if err != nil {
		return err
	}
	return nil
}

// CreateRouteRequest struct implement
type CreateRouteRequest struct {
	Name    string `json:"Name"`
	Gateway string `json:"Gateway"`
}

func (st *CreateRouteRequest) ResetDefault() {
}

//ReadFrom reads  from _is and put into struct.
func (st *CreateRouteRequest) ReadFrom(_is *codec.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.ResetDefault()

	err = _is.Read_string(&st.Name, 0, true)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Gateway, 1, true)
	if err != nil {
		return err
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

//ReadBlock reads struct from the given tag , require or optional.
func (st *CreateRouteRequest) ReadBlock(_is *codec.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.ResetDefault()

	err, have = _is.SkipTo(codec.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require CreateRouteRequest, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(_is)
	if err != nil {
		return err
	}

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

//WriteTo encode struct to buffer
func (st *CreateRouteRequest) WriteTo(_os *codec.Buffer) error {
	var err error

	err = _os.Write_string(st.Name, 0)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Gateway, 1)
	if err != nil {
		return err
	}

	_ = err

	return nil
}

//WriteBlock encode struct
func (st *CreateRouteRequest) WriteBlock(_os *codec.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(codec.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(_os)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.STRUCT_END, 0)
	if err != nil {
		return err
	}
	return nil
}

// CreateRouteReply struct implement
type CreateRouteReply struct {
	RouteID int64 `json:"RouteID"`
}

func (st *CreateRouteReply) ResetDefault() {
}

//ReadFrom reads  from _is and put into struct.
func (st *CreateRouteReply) ReadFrom(_is *codec.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.ResetDefault()

	err = _is.Read_int64(&st.RouteID, 0, true)
	if err != nil {
		return err
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

//ReadBlock reads struct from the given tag , require or optional.
func (st *CreateRouteReply) ReadBlock(_is *codec.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.ResetDefault()

	err, have = _is.SkipTo(codec.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require CreateRouteReply, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(_is)
	if err != nil {
		return err
	}

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

//WriteTo encode struct to buffer
func (st *CreateRouteReply) WriteTo(_os *codec.Buffer) error {
	var err error

	err = _os.Write_int64(st.RouteID, 0)
	if err != nil {
		return err
	}

	_ = err

	return nil
}

//WriteBlock encode struct
func (st *CreateRouteReply) WriteBlock(_os *codec.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(codec.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(_os)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.STRUCT_END, 0)
	if err != nil {
		return err
	}
	return nil
}

// GetRoutesRequest struct implement
type GetRoutesRequest struct {
	RouteID   int64  `json:"RouteID"`
	RouteName string `json:"RouteName"`
}

func (st *GetRoutesRequest) ResetDefault() {
}

//ReadFrom reads  from _is and put into struct.
func (st *GetRoutesRequest) ReadFrom(_is *codec.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.ResetDefault()

	err = _is.Read_int64(&st.RouteID, 0, false)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.RouteName, 1, false)
	if err != nil {
		return err
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

//ReadBlock reads struct from the given tag , require or optional.
func (st *GetRoutesRequest) ReadBlock(_is *codec.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.ResetDefault()

	err, have = _is.SkipTo(codec.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require GetRoutesRequest, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(_is)
	if err != nil {
		return err
	}

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

//WriteTo encode struct to buffer
func (st *GetRoutesRequest) WriteTo(_os *codec.Buffer) error {
	var err error

	err = _os.Write_int64(st.RouteID, 0)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.RouteName, 1)
	if err != nil {
		return err
	}

	_ = err

	return nil
}

//WriteBlock encode struct
func (st *GetRoutesRequest) WriteBlock(_os *codec.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(codec.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(_os)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.STRUCT_END, 0)
	if err != nil {
		return err
	}
	return nil
}

// GetRoutesReply struct implement
type GetRoutesReply struct {
	Routes []Route `json:"Routes"`
}

func (st *GetRoutesReply) ResetDefault() {
}

//ReadFrom reads  from _is and put into struct.
func (st *GetRoutesReply) ReadFrom(_is *codec.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.ResetDefault()

	err, have, ty = _is.SkipToNoCheck(0, true)
	if err != nil {
		return err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return err
		}

		st.Routes = make([]Route, length)
		for i0, e0 := int32(0), length; i0 < e0; i0++ {

			err = st.Routes[i0].ReadBlock(_is, 0, false)
			if err != nil {
				return err
			}

		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("not support simple_list type")
		if err != nil {
			return err
		}

	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return err
		}

	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

//ReadBlock reads struct from the given tag , require or optional.
func (st *GetRoutesReply) ReadBlock(_is *codec.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.ResetDefault()

	err, have = _is.SkipTo(codec.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require GetRoutesReply, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(_is)
	if err != nil {
		return err
	}

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

//WriteTo encode struct to buffer
func (st *GetRoutesReply) WriteTo(_os *codec.Buffer) error {
	var err error

	err = _os.WriteHead(codec.LIST, 0)
	if err != nil {
		return err
	}

	err = _os.Write_int32(int32(len(st.Routes)), 0)
	if err != nil {
		return err
	}

	for _, v := range st.Routes {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return err
		}

	}

	_ = err

	return nil
}

//WriteBlock encode struct
func (st *GetRoutesReply) WriteBlock(_os *codec.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(codec.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(_os)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.STRUCT_END, 0)
	if err != nil {
		return err
	}
	return nil
}

// DeleteRouteRequest struct implement
type DeleteRouteRequest struct {
	RouteID int64 `json:"RouteID"`
}

func (st *DeleteRouteRequest) ResetDefault() {
}

//ReadFrom reads  from _is and put into struct.
func (st *DeleteRouteRequest) ReadFrom(_is *codec.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.ResetDefault()

	err = _is.Read_int64(&st.RouteID, 0, true)
	if err != nil {
		return err
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

//ReadBlock reads struct from the given tag , require or optional.
func (st *DeleteRouteRequest) ReadBlock(_is *codec.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.ResetDefault()

	err, have = _is.SkipTo(codec.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require DeleteRouteRequest, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(_is)
	if err != nil {
		return err
	}

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

//WriteTo encode struct to buffer
func (st *DeleteRouteRequest) WriteTo(_os *codec.Buffer) error {
	var err error

	err = _os.Write_int64(st.RouteID, 0)
	if err != nil {
		return err
	}

	_ = err

	return nil
}

//WriteBlock encode struct
func (st *DeleteRouteRequest) WriteBlock(_os *codec.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(codec.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(_os)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.STRUCT_END, 0)
	if err != nil {
		return err
	}
	return nil
}

// DeleteRouteReply struct implement
type DeleteRouteReply struct {
}

func (st *DeleteRouteReply) ResetDefault() {
}

//ReadFrom reads  from _is and put into struct.
func (st *DeleteRouteReply) ReadFrom(_is *codec.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.ResetDefault()

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

//ReadBlock reads struct from the given tag , require or optional.
func (st *DeleteRouteReply) ReadBlock(_is *codec.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.ResetDefault()

	err, have = _is.SkipTo(codec.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require DeleteRouteReply, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(_is)
	if err != nil {
		return err
	}

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

//WriteTo encode struct to buffer
func (st *DeleteRouteReply) WriteTo(_os *codec.Buffer) error {
	var err error

	_ = err

	return nil
}

//WriteBlock encode struct
func (st *DeleteRouteReply) WriteBlock(_os *codec.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(codec.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(_os)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.STRUCT_END, 0)
	if err != nil {
		return err
	}
	return nil
}

// GetRouteTableRequest struct implement
type GetRouteTableRequest struct {
	RouteID int64 `json:"RouteID"`
}

func (st *GetRouteTableRequest) ResetDefault() {
}

//ReadFrom reads  from _is and put into struct.
func (st *GetRouteTableRequest) ReadFrom(_is *codec.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.ResetDefault()

	err = _is.Read_int64(&st.RouteID, 0, true)
	if err != nil {
		return err
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

//ReadBlock reads struct from the given tag , require or optional.
func (st *GetRouteTableRequest) ReadBlock(_is *codec.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.ResetDefault()

	err, have = _is.SkipTo(codec.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require GetRouteTableRequest, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(_is)
	if err != nil {
		return err
	}

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

//WriteTo encode struct to buffer
func (st *GetRouteTableRequest) WriteTo(_os *codec.Buffer) error {
	var err error

	err = _os.Write_int64(st.RouteID, 0)
	if err != nil {
		return err
	}

	_ = err

	return nil
}

//WriteBlock encode struct
func (st *GetRouteTableRequest) WriteBlock(_os *codec.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(codec.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(_os)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.STRUCT_END, 0)
	if err != nil {
		return err
	}
	return nil
}

// GetRouteTableReply struct implement
type GetRouteTableReply struct {
	Routes []RouteTable `json:"Routes"`
}

func (st *GetRouteTableReply) ResetDefault() {
}

//ReadFrom reads  from _is and put into struct.
func (st *GetRouteTableReply) ReadFrom(_is *codec.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.ResetDefault()

	err, have, ty = _is.SkipToNoCheck(0, true)
	if err != nil {
		return err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return err
		}

		st.Routes = make([]RouteTable, length)
		for i0, e0 := int32(0), length; i0 < e0; i0++ {

			err = st.Routes[i0].ReadBlock(_is, 0, false)
			if err != nil {
				return err
			}

		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("not support simple_list type")
		if err != nil {
			return err
		}

	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return err
		}

	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

//ReadBlock reads struct from the given tag , require or optional.
func (st *GetRouteTableReply) ReadBlock(_is *codec.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.ResetDefault()

	err, have = _is.SkipTo(codec.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require GetRouteTableReply, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(_is)
	if err != nil {
		return err
	}

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

//WriteTo encode struct to buffer
func (st *GetRouteTableReply) WriteTo(_os *codec.Buffer) error {
	var err error

	err = _os.WriteHead(codec.LIST, 0)
	if err != nil {
		return err
	}

	err = _os.Write_int32(int32(len(st.Routes)), 0)
	if err != nil {
		return err
	}

	for _, v := range st.Routes {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return err
		}

	}

	_ = err

	return nil
}

//WriteBlock encode struct
func (st *GetRouteTableReply) WriteBlock(_os *codec.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(codec.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(_os)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.STRUCT_END, 0)
	if err != nil {
		return err
	}
	return nil
}

// CreateRouteTableRequest struct implement
type CreateRouteTableRequest struct {
	RouteID            int64      `json:"RouteID"`
	FatherRouteTableID int64      `json:"FatherRouteTableID"`
	RouteTable         RouteTable `json:"RouteTable"`
}

func (st *CreateRouteTableRequest) ResetDefault() {
	st.RouteTable.ResetDefault()
}

//ReadFrom reads  from _is and put into struct.
func (st *CreateRouteTableRequest) ReadFrom(_is *codec.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.ResetDefault()

	err = _is.Read_int64(&st.RouteID, 0, true)
	if err != nil {
		return err
	}

	err = _is.Read_int64(&st.FatherRouteTableID, 1, false)
	if err != nil {
		return err
	}

	err = st.RouteTable.ReadBlock(_is, 2, true)
	if err != nil {
		return err
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

//ReadBlock reads struct from the given tag , require or optional.
func (st *CreateRouteTableRequest) ReadBlock(_is *codec.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.ResetDefault()

	err, have = _is.SkipTo(codec.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require CreateRouteTableRequest, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(_is)
	if err != nil {
		return err
	}

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

//WriteTo encode struct to buffer
func (st *CreateRouteTableRequest) WriteTo(_os *codec.Buffer) error {
	var err error

	err = _os.Write_int64(st.RouteID, 0)
	if err != nil {
		return err
	}

	err = _os.Write_int64(st.FatherRouteTableID, 1)
	if err != nil {
		return err
	}

	err = st.RouteTable.WriteBlock(_os, 2)
	if err != nil {
		return err
	}

	_ = err

	return nil
}

//WriteBlock encode struct
func (st *CreateRouteTableRequest) WriteBlock(_os *codec.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(codec.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(_os)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.STRUCT_END, 0)
	if err != nil {
		return err
	}
	return nil
}

// CreateRouteTableReply struct implement
type CreateRouteTableReply struct {
}

func (st *CreateRouteTableReply) ResetDefault() {
}

//ReadFrom reads  from _is and put into struct.
func (st *CreateRouteTableReply) ReadFrom(_is *codec.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.ResetDefault()

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

//ReadBlock reads struct from the given tag , require or optional.
func (st *CreateRouteTableReply) ReadBlock(_is *codec.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.ResetDefault()

	err, have = _is.SkipTo(codec.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require CreateRouteTableReply, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(_is)
	if err != nil {
		return err
	}

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

//WriteTo encode struct to buffer
func (st *CreateRouteTableReply) WriteTo(_os *codec.Buffer) error {
	var err error

	_ = err

	return nil
}

//WriteBlock encode struct
func (st *CreateRouteTableReply) WriteBlock(_os *codec.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(codec.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(_os)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.STRUCT_END, 0)
	if err != nil {
		return err
	}
	return nil
}

// DeleteRouteTableRequest struct implement
type DeleteRouteTableRequest struct {
	RouteID      int64 `json:"RouteID"`
	RouteTableID int64 `json:"RouteTableID"`
}

func (st *DeleteRouteTableRequest) ResetDefault() {
}

//ReadFrom reads  from _is and put into struct.
func (st *DeleteRouteTableRequest) ReadFrom(_is *codec.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.ResetDefault()

	err = _is.Read_int64(&st.RouteID, 0, true)
	if err != nil {
		return err
	}

	err = _is.Read_int64(&st.RouteTableID, 1, true)
	if err != nil {
		return err
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

//ReadBlock reads struct from the given tag , require or optional.
func (st *DeleteRouteTableRequest) ReadBlock(_is *codec.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.ResetDefault()

	err, have = _is.SkipTo(codec.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require DeleteRouteTableRequest, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(_is)
	if err != nil {
		return err
	}

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

//WriteTo encode struct to buffer
func (st *DeleteRouteTableRequest) WriteTo(_os *codec.Buffer) error {
	var err error

	err = _os.Write_int64(st.RouteID, 0)
	if err != nil {
		return err
	}

	err = _os.Write_int64(st.RouteTableID, 1)
	if err != nil {
		return err
	}

	_ = err

	return nil
}

//WriteBlock encode struct
func (st *DeleteRouteTableRequest) WriteBlock(_os *codec.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(codec.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(_os)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.STRUCT_END, 0)
	if err != nil {
		return err
	}
	return nil
}

// DeleteRouteTableReply struct implement
type DeleteRouteTableReply struct {
}

func (st *DeleteRouteTableReply) ResetDefault() {
}

//ReadFrom reads  from _is and put into struct.
func (st *DeleteRouteTableReply) ReadFrom(_is *codec.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.ResetDefault()

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

//ReadBlock reads struct from the given tag , require or optional.
func (st *DeleteRouteTableReply) ReadBlock(_is *codec.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.ResetDefault()

	err, have = _is.SkipTo(codec.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require DeleteRouteTableReply, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(_is)
	if err != nil {
		return err
	}

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

//WriteTo encode struct to buffer
func (st *DeleteRouteTableReply) WriteTo(_os *codec.Buffer) error {
	var err error

	_ = err

	return nil
}

//WriteBlock encode struct
func (st *DeleteRouteTableReply) WriteBlock(_os *codec.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(codec.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(_os)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.STRUCT_END, 0)
	if err != nil {
		return err
	}
	return nil
}

// EditRouteTableRequest struct implement
type EditRouteTableRequest struct {
	RouteID    int64      `json:"RouteID"`
	RouteTable RouteTable `json:"RouteTable"`
}

func (st *EditRouteTableRequest) ResetDefault() {
	st.RouteTable.ResetDefault()
}

//ReadFrom reads  from _is and put into struct.
func (st *EditRouteTableRequest) ReadFrom(_is *codec.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.ResetDefault()

	err = _is.Read_int64(&st.RouteID, 0, true)
	if err != nil {
		return err
	}

	err = st.RouteTable.ReadBlock(_is, 1, true)
	if err != nil {
		return err
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

//ReadBlock reads struct from the given tag , require or optional.
func (st *EditRouteTableRequest) ReadBlock(_is *codec.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.ResetDefault()

	err, have = _is.SkipTo(codec.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require EditRouteTableRequest, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(_is)
	if err != nil {
		return err
	}

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

//WriteTo encode struct to buffer
func (st *EditRouteTableRequest) WriteTo(_os *codec.Buffer) error {
	var err error

	err = _os.Write_int64(st.RouteID, 0)
	if err != nil {
		return err
	}

	err = st.RouteTable.WriteBlock(_os, 1)
	if err != nil {
		return err
	}

	_ = err

	return nil
}

//WriteBlock encode struct
func (st *EditRouteTableRequest) WriteBlock(_os *codec.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(codec.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(_os)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.STRUCT_END, 0)
	if err != nil {
		return err
	}
	return nil
}

// EditRouteTableReply struct implement
type EditRouteTableReply struct {
}

func (st *EditRouteTableReply) ResetDefault() {
}

//ReadFrom reads  from _is and put into struct.
func (st *EditRouteTableReply) ReadFrom(_is *codec.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.ResetDefault()

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

//ReadBlock reads struct from the given tag , require or optional.
func (st *EditRouteTableReply) ReadBlock(_is *codec.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.ResetDefault()

	err, have = _is.SkipTo(codec.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require EditRouteTableReply, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(_is)
	if err != nil {
		return err
	}

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

//WriteTo encode struct to buffer
func (st *EditRouteTableReply) WriteTo(_os *codec.Buffer) error {
	var err error

	_ = err

	return nil
}

//WriteBlock encode struct
func (st *EditRouteTableReply) WriteBlock(_os *codec.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(codec.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(_os)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.STRUCT_END, 0)
	if err != nil {
		return err
	}
	return nil
}
