// Package rbac_server comment
// This file was generated by tars2go 1.1.4
// Generated from rbac_server.tars
package rbac_server

import (
	"fmt"

	"github.com/TarsCloud/TarsGo/tars/protocol/codec"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = fmt.Errorf
var _ = codec.FromInt8

type AUTH_TYPE int32

const (
	AUTH_TYPE_TOKEN = 0
	AUTH_TYPE_API   = 1
)

// RouteAuth struct implement
type RouteAuth struct {
	Type      AUTH_TYPE `json:"Type"`
	RolesName []string  `json:"RolesName"`
	RbacID    int64     `json:"RbacID"`
}

func (st *RouteAuth) ResetDefault() {
}

//ReadFrom reads  from _is and put into struct.
func (st *RouteAuth) ReadFrom(_is *codec.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.ResetDefault()

	err = _is.Read_int32((*int32)(&st.Type), 0, true)
	if err != nil {
		return err
	}

	err, have, ty = _is.SkipToNoCheck(1, false)
	if err != nil {
		return err
	}

	if have {
		if ty == codec.LIST {
			err = _is.Read_int32(&length, 0, true)
			if err != nil {
				return err
			}

			st.RolesName = make([]string, length)
			for i0, e0 := int32(0), length; i0 < e0; i0++ {

				err = _is.Read_string(&st.RolesName[i0], 0, false)
				if err != nil {
					return err
				}

			}
		} else if ty == codec.SIMPLE_LIST {
			err = fmt.Errorf("not support simple_list type")
			if err != nil {
				return err
			}

		} else {
			err = fmt.Errorf("require vector, but not")
			if err != nil {
				return err
			}

		}
	}

	err = _is.Read_int64(&st.RbacID, 2, false)
	if err != nil {
		return err
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

//ReadBlock reads struct from the given tag , require or optional.
func (st *RouteAuth) ReadBlock(_is *codec.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.ResetDefault()

	err, have = _is.SkipTo(codec.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require RouteAuth, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(_is)
	if err != nil {
		return err
	}

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

//WriteTo encode struct to buffer
func (st *RouteAuth) WriteTo(_os *codec.Buffer) error {
	var err error

	err = _os.Write_int32(int32(st.Type), 0)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.LIST, 1)
	if err != nil {
		return err
	}

	err = _os.Write_int32(int32(len(st.RolesName)), 0)
	if err != nil {
		return err
	}

	for _, v := range st.RolesName {

		err = _os.Write_string(v, 0)
		if err != nil {
			return err
		}

	}

	err = _os.Write_int64(st.RbacID, 2)
	if err != nil {
		return err
	}

	_ = err

	return nil
}

//WriteBlock encode struct
func (st *RouteAuth) WriteBlock(_os *codec.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(codec.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(_os)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.STRUCT_END, 0)
	if err != nil {
		return err
	}
	return nil
}
