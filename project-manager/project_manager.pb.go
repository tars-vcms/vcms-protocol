// Code generated by protoc-gen-go. DO NOT EDIT.
// source: project_manager.proto

package project_manager

import (
	context "context"
	fmt "fmt"
	tars "github.com/TarsCloud/TarsGo/tars"
	model "github.com/TarsCloud/TarsGo/tars/model"
	requestf "github.com/TarsCloud/TarsGo/tars/protocol/res/requestf"
	current "github.com/TarsCloud/TarsGo/tars/util/current"
	tools "github.com/TarsCloud/TarsGo/tars/util/tools"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PROJECT_TYPE int32

const (
	// 用于构建平台自身的插件
	PROJECT_TYPE_PLUGIN PROJECT_TYPE = 0
	// 业务项目
	PROJECT_TYPE_BUSINESS PROJECT_TYPE = 1
	// 平台
	PROJECT_TYPE_PLATFORM PROJECT_TYPE = 2
)

var PROJECT_TYPE_name = map[int32]string{
	0: "PLUGIN",
	1: "BUSINESS",
	2: "PLATFORM",
}

var PROJECT_TYPE_value = map[string]int32{
	"PLUGIN":   0,
	"BUSINESS": 1,
	"PLATFORM": 2,
}

func (x PROJECT_TYPE) String() string {
	return proto.EnumName(PROJECT_TYPE_name, int32(x))
}

func (PROJECT_TYPE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6a534611bb3d10c3, []int{0}
}

type PROJECT_VISIBILITY int32

const (
	// 开发，产品可见
	PROJECT_VISIBILITY_PRODUCT_OWNER PROJECT_VISIBILITY = 0
	// 所有人可见
	PROJECT_VISIBILITY_PUBLIC PROJECT_VISIBILITY = 1
	// 有权限的可见
	PROJECT_VISIBILITY_HAVE_AUTHORIZATION PROJECT_VISIBILITY = 2
)

var PROJECT_VISIBILITY_name = map[int32]string{
	0: "PRODUCT_OWNER",
	1: "PUBLIC",
	2: "HAVE_AUTHORIZATION",
}

var PROJECT_VISIBILITY_value = map[string]int32{
	"PRODUCT_OWNER":      0,
	"PUBLIC":             1,
	"HAVE_AUTHORIZATION": 2,
}

func (x PROJECT_VISIBILITY) String() string {
	return proto.EnumName(PROJECT_VISIBILITY_name, int32(x))
}

func (PROJECT_VISIBILITY) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6a534611bb3d10c3, []int{1}
}

type PLUGIN_STATUS int32

const (
	PLUGIN_STATUS_ENABLED  PLUGIN_STATUS = 0
	PLUGIN_STATUS_DISABLED PLUGIN_STATUS = 1
)

var PLUGIN_STATUS_name = map[int32]string{
	0: "ENABLED",
	1: "DISABLED",
}

var PLUGIN_STATUS_value = map[string]int32{
	"ENABLED":  0,
	"DISABLED": 1,
}

func (x PLUGIN_STATUS) String() string {
	return proto.EnumName(PLUGIN_STATUS_name, int32(x))
}

func (PLUGIN_STATUS) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6a534611bb3d10c3, []int{2}
}

type Project struct {
	ID                   int64              `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name                 string             `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Visibility           PROJECT_VISIBILITY `protobuf:"varint,3,opt,name=Visibility,proto3,enum=tars_vcms.project_manager.PROJECT_VISIBILITY" json:"Visibility,omitempty"`
	Type                 PROJECT_TYPE       `protobuf:"varint,4,opt,name=Type,proto3,enum=tars_vcms.project_manager.PROJECT_TYPE" json:"Type,omitempty"`
	DevelopersID         []int64            `protobuf:"varint,5,rep,packed,name=DevelopersID,proto3" json:"DevelopersID,omitempty"`
	PMsID                []int64            `protobuf:"varint,6,rep,packed,name=PMsID,proto3" json:"PMsID,omitempty"`
	Plugins              []*ProjectPlugin   `protobuf:"bytes,7,rep,name=Plugins,proto3" json:"Plugins,omitempty"`
	CreatedAt            int64              `protobuf:"varint,8,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Project) Reset()         { *m = Project{} }
func (m *Project) String() string { return proto.CompactTextString(m) }
func (*Project) ProtoMessage()    {}
func (*Project) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a534611bb3d10c3, []int{0}
}

func (m *Project) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Project.Unmarshal(m, b)
}
func (m *Project) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Project.Marshal(b, m, deterministic)
}
func (m *Project) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Project.Merge(m, src)
}
func (m *Project) XXX_Size() int {
	return xxx_messageInfo_Project.Size(m)
}
func (m *Project) XXX_DiscardUnknown() {
	xxx_messageInfo_Project.DiscardUnknown(m)
}

var xxx_messageInfo_Project proto.InternalMessageInfo

func (m *Project) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Project) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Project) GetVisibility() PROJECT_VISIBILITY {
	if m != nil {
		return m.Visibility
	}
	return PROJECT_VISIBILITY_PRODUCT_OWNER
}

func (m *Project) GetType() PROJECT_TYPE {
	if m != nil {
		return m.Type
	}
	return PROJECT_TYPE_PLUGIN
}

func (m *Project) GetDevelopersID() []int64 {
	if m != nil {
		return m.DevelopersID
	}
	return nil
}

func (m *Project) GetPMsID() []int64 {
	if m != nil {
		return m.PMsID
	}
	return nil
}

func (m *Project) GetPlugins() []*ProjectPlugin {
	if m != nil {
		return m.Plugins
	}
	return nil
}

func (m *Project) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

type ProjectPlugin struct {
	ProjectID            int64             `protobuf:"varint,1,opt,name=ProjectID,proto3" json:"ProjectID,omitempty"`
	PluginID             int64             `protobuf:"varint,2,opt,name=PluginID,proto3" json:"PluginID,omitempty"`
	PluginInfo           map[string]string `protobuf:"bytes,3,rep,name=PluginInfo,proto3" json:"PluginInfo,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ProjectPlugin) Reset()         { *m = ProjectPlugin{} }
func (m *ProjectPlugin) String() string { return proto.CompactTextString(m) }
func (*ProjectPlugin) ProtoMessage()    {}
func (*ProjectPlugin) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a534611bb3d10c3, []int{1}
}

func (m *ProjectPlugin) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProjectPlugin.Unmarshal(m, b)
}
func (m *ProjectPlugin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProjectPlugin.Marshal(b, m, deterministic)
}
func (m *ProjectPlugin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProjectPlugin.Merge(m, src)
}
func (m *ProjectPlugin) XXX_Size() int {
	return xxx_messageInfo_ProjectPlugin.Size(m)
}
func (m *ProjectPlugin) XXX_DiscardUnknown() {
	xxx_messageInfo_ProjectPlugin.DiscardUnknown(m)
}

var xxx_messageInfo_ProjectPlugin proto.InternalMessageInfo

func (m *ProjectPlugin) GetProjectID() int64 {
	if m != nil {
		return m.ProjectID
	}
	return 0
}

func (m *ProjectPlugin) GetPluginID() int64 {
	if m != nil {
		return m.PluginID
	}
	return 0
}

func (m *ProjectPlugin) GetPluginInfo() map[string]string {
	if m != nil {
		return m.PluginInfo
	}
	return nil
}

type CreateProjectRequest struct {
	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	// 创建者的用户ID 设置为默认开发
	StaffID int64 `protobuf:"varint,2,opt,name=StaffID,proto3" json:"StaffID,omitempty"`
	// 项目类型，是否为插件
	Type                 PROJECT_TYPE `protobuf:"varint,3,opt,name=Type,proto3,enum=tars_vcms.project_manager.PROJECT_TYPE" json:"Type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *CreateProjectRequest) Reset()         { *m = CreateProjectRequest{} }
func (m *CreateProjectRequest) String() string { return proto.CompactTextString(m) }
func (*CreateProjectRequest) ProtoMessage()    {}
func (*CreateProjectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a534611bb3d10c3, []int{2}
}

func (m *CreateProjectRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateProjectRequest.Unmarshal(m, b)
}
func (m *CreateProjectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateProjectRequest.Marshal(b, m, deterministic)
}
func (m *CreateProjectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateProjectRequest.Merge(m, src)
}
func (m *CreateProjectRequest) XXX_Size() int {
	return xxx_messageInfo_CreateProjectRequest.Size(m)
}
func (m *CreateProjectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateProjectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateProjectRequest proto.InternalMessageInfo

func (m *CreateProjectRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateProjectRequest) GetStaffID() int64 {
	if m != nil {
		return m.StaffID
	}
	return 0
}

func (m *CreateProjectRequest) GetType() PROJECT_TYPE {
	if m != nil {
		return m.Type
	}
	return PROJECT_TYPE_PLUGIN
}

type CreateProjectReply struct {
	Project              *Project `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateProjectReply) Reset()         { *m = CreateProjectReply{} }
func (m *CreateProjectReply) String() string { return proto.CompactTextString(m) }
func (*CreateProjectReply) ProtoMessage()    {}
func (*CreateProjectReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a534611bb3d10c3, []int{3}
}

func (m *CreateProjectReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateProjectReply.Unmarshal(m, b)
}
func (m *CreateProjectReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateProjectReply.Marshal(b, m, deterministic)
}
func (m *CreateProjectReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateProjectReply.Merge(m, src)
}
func (m *CreateProjectReply) XXX_Size() int {
	return xxx_messageInfo_CreateProjectReply.Size(m)
}
func (m *CreateProjectReply) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateProjectReply.DiscardUnknown(m)
}

var xxx_messageInfo_CreateProjectReply proto.InternalMessageInfo

func (m *CreateProjectReply) GetProject() *Project {
	if m != nil {
		return m.Project
	}
	return nil
}

type DeleteProjectRequest struct {
	// 删除的项目ID
	ProjectID int64 `protobuf:"varint,1,opt,name=ProjectID,proto3" json:"ProjectID,omitempty"`
	// 操作人的ID
	StaffID              int64    `protobuf:"varint,2,opt,name=StaffID,proto3" json:"StaffID,omitempty"`
	Reason               string   `protobuf:"bytes,3,opt,name=Reason,proto3" json:"Reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteProjectRequest) Reset()         { *m = DeleteProjectRequest{} }
func (m *DeleteProjectRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteProjectRequest) ProtoMessage()    {}
func (*DeleteProjectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a534611bb3d10c3, []int{4}
}

func (m *DeleteProjectRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteProjectRequest.Unmarshal(m, b)
}
func (m *DeleteProjectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteProjectRequest.Marshal(b, m, deterministic)
}
func (m *DeleteProjectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteProjectRequest.Merge(m, src)
}
func (m *DeleteProjectRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteProjectRequest.Size(m)
}
func (m *DeleteProjectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteProjectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteProjectRequest proto.InternalMessageInfo

func (m *DeleteProjectRequest) GetProjectID() int64 {
	if m != nil {
		return m.ProjectID
	}
	return 0
}

func (m *DeleteProjectRequest) GetStaffID() int64 {
	if m != nil {
		return m.StaffID
	}
	return 0
}

func (m *DeleteProjectRequest) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type DeleteProjectReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteProjectReply) Reset()         { *m = DeleteProjectReply{} }
func (m *DeleteProjectReply) String() string { return proto.CompactTextString(m) }
func (*DeleteProjectReply) ProtoMessage()    {}
func (*DeleteProjectReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a534611bb3d10c3, []int{5}
}

func (m *DeleteProjectReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteProjectReply.Unmarshal(m, b)
}
func (m *DeleteProjectReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteProjectReply.Marshal(b, m, deterministic)
}
func (m *DeleteProjectReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteProjectReply.Merge(m, src)
}
func (m *DeleteProjectReply) XXX_Size() int {
	return xxx_messageInfo_DeleteProjectReply.Size(m)
}
func (m *DeleteProjectReply) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteProjectReply.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteProjectReply proto.InternalMessageInfo

type GetProjectsRequest struct {
	// 为空表示根据其他条件搜索
	StaffID int64 `protobuf:"varint,1,opt,name=StaffID,proto3" json:"StaffID,omitempty"`
	// 为空表示根据其他条件搜索
	ProjectID            []int64  `protobuf:"varint,2,rep,packed,name=ProjectID,proto3" json:"ProjectID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetProjectsRequest) Reset()         { *m = GetProjectsRequest{} }
func (m *GetProjectsRequest) String() string { return proto.CompactTextString(m) }
func (*GetProjectsRequest) ProtoMessage()    {}
func (*GetProjectsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a534611bb3d10c3, []int{6}
}

func (m *GetProjectsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetProjectsRequest.Unmarshal(m, b)
}
func (m *GetProjectsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetProjectsRequest.Marshal(b, m, deterministic)
}
func (m *GetProjectsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetProjectsRequest.Merge(m, src)
}
func (m *GetProjectsRequest) XXX_Size() int {
	return xxx_messageInfo_GetProjectsRequest.Size(m)
}
func (m *GetProjectsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetProjectsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetProjectsRequest proto.InternalMessageInfo

func (m *GetProjectsRequest) GetStaffID() int64 {
	if m != nil {
		return m.StaffID
	}
	return 0
}

func (m *GetProjectsRequest) GetProjectID() []int64 {
	if m != nil {
		return m.ProjectID
	}
	return nil
}

type GetProjectsReply struct {
	Projects             []*Project `protobuf:"bytes,1,rep,name=Projects,proto3" json:"Projects,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *GetProjectsReply) Reset()         { *m = GetProjectsReply{} }
func (m *GetProjectsReply) String() string { return proto.CompactTextString(m) }
func (*GetProjectsReply) ProtoMessage()    {}
func (*GetProjectsReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a534611bb3d10c3, []int{7}
}

func (m *GetProjectsReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetProjectsReply.Unmarshal(m, b)
}
func (m *GetProjectsReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetProjectsReply.Marshal(b, m, deterministic)
}
func (m *GetProjectsReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetProjectsReply.Merge(m, src)
}
func (m *GetProjectsReply) XXX_Size() int {
	return xxx_messageInfo_GetProjectsReply.Size(m)
}
func (m *GetProjectsReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetProjectsReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetProjectsReply proto.InternalMessageInfo

func (m *GetProjectsReply) GetProjects() []*Project {
	if m != nil {
		return m.Projects
	}
	return nil
}

type SetProjectStaffRequest struct {
	// 操作人ID
	StaffID              int64    `protobuf:"varint,1,opt,name=StaffID,proto3" json:"StaffID,omitempty"`
	DevelopersID         []int64  `protobuf:"varint,2,rep,packed,name=DevelopersID,proto3" json:"DevelopersID,omitempty"`
	PMsID                []int64  `protobuf:"varint,3,rep,packed,name=PMsID,proto3" json:"PMsID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetProjectStaffRequest) Reset()         { *m = SetProjectStaffRequest{} }
func (m *SetProjectStaffRequest) String() string { return proto.CompactTextString(m) }
func (*SetProjectStaffRequest) ProtoMessage()    {}
func (*SetProjectStaffRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a534611bb3d10c3, []int{8}
}

func (m *SetProjectStaffRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetProjectStaffRequest.Unmarshal(m, b)
}
func (m *SetProjectStaffRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetProjectStaffRequest.Marshal(b, m, deterministic)
}
func (m *SetProjectStaffRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetProjectStaffRequest.Merge(m, src)
}
func (m *SetProjectStaffRequest) XXX_Size() int {
	return xxx_messageInfo_SetProjectStaffRequest.Size(m)
}
func (m *SetProjectStaffRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetProjectStaffRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetProjectStaffRequest proto.InternalMessageInfo

func (m *SetProjectStaffRequest) GetStaffID() int64 {
	if m != nil {
		return m.StaffID
	}
	return 0
}

func (m *SetProjectStaffRequest) GetDevelopersID() []int64 {
	if m != nil {
		return m.DevelopersID
	}
	return nil
}

func (m *SetProjectStaffRequest) GetPMsID() []int64 {
	if m != nil {
		return m.PMsID
	}
	return nil
}

type SetProjectStaffReply struct {
	Project              *Project `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetProjectStaffReply) Reset()         { *m = SetProjectStaffReply{} }
func (m *SetProjectStaffReply) String() string { return proto.CompactTextString(m) }
func (*SetProjectStaffReply) ProtoMessage()    {}
func (*SetProjectStaffReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a534611bb3d10c3, []int{9}
}

func (m *SetProjectStaffReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetProjectStaffReply.Unmarshal(m, b)
}
func (m *SetProjectStaffReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetProjectStaffReply.Marshal(b, m, deterministic)
}
func (m *SetProjectStaffReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetProjectStaffReply.Merge(m, src)
}
func (m *SetProjectStaffReply) XXX_Size() int {
	return xxx_messageInfo_SetProjectStaffReply.Size(m)
}
func (m *SetProjectStaffReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SetProjectStaffReply.DiscardUnknown(m)
}

var xxx_messageInfo_SetProjectStaffReply proto.InternalMessageInfo

func (m *SetProjectStaffReply) GetProject() *Project {
	if m != nil {
		return m.Project
	}
	return nil
}

type SetProjectPluginRequest struct {
	ProjectID int64         `protobuf:"varint,1,opt,name=ProjectID,proto3" json:"ProjectID,omitempty"`
	Status    PLUGIN_STATUS `protobuf:"varint,2,opt,name=Status,proto3,enum=tars_vcms.project_manager.PLUGIN_STATUS" json:"Status,omitempty"`
	// 操作者ID
	StaffID              int64             `protobuf:"varint,3,opt,name=StaffID,proto3" json:"StaffID,omitempty"`
	PluginInfo           map[string]string `protobuf:"bytes,4,rep,name=PluginInfo,proto3" json:"PluginInfo,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *SetProjectPluginRequest) Reset()         { *m = SetProjectPluginRequest{} }
func (m *SetProjectPluginRequest) String() string { return proto.CompactTextString(m) }
func (*SetProjectPluginRequest) ProtoMessage()    {}
func (*SetProjectPluginRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a534611bb3d10c3, []int{10}
}

func (m *SetProjectPluginRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetProjectPluginRequest.Unmarshal(m, b)
}
func (m *SetProjectPluginRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetProjectPluginRequest.Marshal(b, m, deterministic)
}
func (m *SetProjectPluginRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetProjectPluginRequest.Merge(m, src)
}
func (m *SetProjectPluginRequest) XXX_Size() int {
	return xxx_messageInfo_SetProjectPluginRequest.Size(m)
}
func (m *SetProjectPluginRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetProjectPluginRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetProjectPluginRequest proto.InternalMessageInfo

func (m *SetProjectPluginRequest) GetProjectID() int64 {
	if m != nil {
		return m.ProjectID
	}
	return 0
}

func (m *SetProjectPluginRequest) GetStatus() PLUGIN_STATUS {
	if m != nil {
		return m.Status
	}
	return PLUGIN_STATUS_ENABLED
}

func (m *SetProjectPluginRequest) GetStaffID() int64 {
	if m != nil {
		return m.StaffID
	}
	return 0
}

func (m *SetProjectPluginRequest) GetPluginInfo() map[string]string {
	if m != nil {
		return m.PluginInfo
	}
	return nil
}

type SetProjectPluginReply struct {
	Plugin               *ProjectPlugin `protobuf:"bytes,1,opt,name=Plugin,proto3" json:"Plugin,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *SetProjectPluginReply) Reset()         { *m = SetProjectPluginReply{} }
func (m *SetProjectPluginReply) String() string { return proto.CompactTextString(m) }
func (*SetProjectPluginReply) ProtoMessage()    {}
func (*SetProjectPluginReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a534611bb3d10c3, []int{11}
}

func (m *SetProjectPluginReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetProjectPluginReply.Unmarshal(m, b)
}
func (m *SetProjectPluginReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetProjectPluginReply.Marshal(b, m, deterministic)
}
func (m *SetProjectPluginReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetProjectPluginReply.Merge(m, src)
}
func (m *SetProjectPluginReply) XXX_Size() int {
	return xxx_messageInfo_SetProjectPluginReply.Size(m)
}
func (m *SetProjectPluginReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SetProjectPluginReply.DiscardUnknown(m)
}

var xxx_messageInfo_SetProjectPluginReply proto.InternalMessageInfo

func (m *SetProjectPluginReply) GetPlugin() *ProjectPlugin {
	if m != nil {
		return m.Plugin
	}
	return nil
}

func init() {
	proto.RegisterEnum("tars_vcms.project_manager.PROJECT_TYPE", PROJECT_TYPE_name, PROJECT_TYPE_value)
	proto.RegisterEnum("tars_vcms.project_manager.PROJECT_VISIBILITY", PROJECT_VISIBILITY_name, PROJECT_VISIBILITY_value)
	proto.RegisterEnum("tars_vcms.project_manager.PLUGIN_STATUS", PLUGIN_STATUS_name, PLUGIN_STATUS_value)
	proto.RegisterType((*Project)(nil), "tars_vcms.project_manager.Project")
	proto.RegisterType((*ProjectPlugin)(nil), "tars_vcms.project_manager.ProjectPlugin")
	proto.RegisterMapType((map[string]string)(nil), "tars_vcms.project_manager.ProjectPlugin.PluginInfoEntry")
	proto.RegisterType((*CreateProjectRequest)(nil), "tars_vcms.project_manager.CreateProjectRequest")
	proto.RegisterType((*CreateProjectReply)(nil), "tars_vcms.project_manager.CreateProjectReply")
	proto.RegisterType((*DeleteProjectRequest)(nil), "tars_vcms.project_manager.DeleteProjectRequest")
	proto.RegisterType((*DeleteProjectReply)(nil), "tars_vcms.project_manager.DeleteProjectReply")
	proto.RegisterType((*GetProjectsRequest)(nil), "tars_vcms.project_manager.GetProjectsRequest")
	proto.RegisterType((*GetProjectsReply)(nil), "tars_vcms.project_manager.GetProjectsReply")
	proto.RegisterType((*SetProjectStaffRequest)(nil), "tars_vcms.project_manager.SetProjectStaffRequest")
	proto.RegisterType((*SetProjectStaffReply)(nil), "tars_vcms.project_manager.SetProjectStaffReply")
	proto.RegisterType((*SetProjectPluginRequest)(nil), "tars_vcms.project_manager.SetProjectPluginRequest")
	proto.RegisterMapType((map[string]string)(nil), "tars_vcms.project_manager.SetProjectPluginRequest.PluginInfoEntry")
	proto.RegisterType((*SetProjectPluginReply)(nil), "tars_vcms.project_manager.SetProjectPluginReply")
}

func init() { proto.RegisterFile("project_manager.proto", fileDescriptor_6a534611bb3d10c3) }

var fileDescriptor_6a534611bb3d10c3 = []byte{
	// 800 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0x4b, 0x6f, 0xda, 0x58,
	0x14, 0x8e, 0x6d, 0xc2, 0xe3, 0x10, 0x88, 0x73, 0x45, 0x32, 0x1e, 0x34, 0x0b, 0xe4, 0xcd, 0x20,
	0x46, 0x21, 0x53, 0x2a, 0x55, 0x51, 0x5f, 0x0a, 0x60, 0x37, 0x71, 0xcb, 0x4b, 0xd7, 0x26, 0x6d,
	0xb2, 0x41, 0x4e, 0x7a, 0x89, 0x68, 0x1d, 0x4c, 0xb1, 0x89, 0xca, 0xb2, 0x7f, 0xaa, 0x3f, 0xa3,
	0xbb, 0xfe, 0x81, 0xfe, 0x92, 0xca, 0xd7, 0x06, 0x6c, 0x93, 0x38, 0x4e, 0xab, 0xee, 0x7c, 0xce,
	0x3d, 0xdf, 0x79, 0x7c, 0xe7, 0x01, 0xb0, 0x3b, 0x99, 0x9a, 0x1f, 0xc8, 0xa5, 0x3d, 0xb8, 0xd6,
	0xc7, 0xfa, 0x15, 0x99, 0x56, 0x27, 0x53, 0xd3, 0x36, 0xd1, 0xdf, 0xb6, 0x3e, 0xb5, 0x06, 0x37,
	0x97, 0xd7, 0x56, 0x35, 0x64, 0x20, 0x7e, 0x67, 0x21, 0xd5, 0x73, 0x75, 0x28, 0x0f, 0xac, 0x22,
	0x09, 0x4c, 0x89, 0x29, 0x73, 0x98, 0x55, 0x24, 0x84, 0x20, 0xd1, 0xd1, 0xaf, 0x89, 0xc0, 0x96,
	0x98, 0x72, 0x06, 0xd3, 0x6f, 0xd4, 0x06, 0x38, 0x1d, 0x59, 0xa3, 0x8b, 0x91, 0x31, 0xb2, 0xe7,
	0x02, 0x57, 0x62, 0xca, 0xf9, 0xda, 0x7e, 0xf5, 0x4e, 0xff, 0xd5, 0x1e, 0xee, 0xbe, 0x96, 0x9b,
	0xda, 0xe0, 0x54, 0x51, 0x95, 0x86, 0xd2, 0x52, 0xb4, 0x33, 0xec, 0x73, 0x80, 0x9e, 0x41, 0x42,
	0x9b, 0x4f, 0x88, 0x90, 0xa0, 0x8e, 0xfe, 0x8d, 0xe1, 0x48, 0x3b, 0xeb, 0xc9, 0x98, 0x82, 0x90,
	0x08, 0x5b, 0x12, 0xb9, 0x21, 0x86, 0x39, 0x21, 0x53, 0x4b, 0x91, 0x84, 0xcd, 0x12, 0x57, 0xe6,
	0x70, 0x40, 0x87, 0x0a, 0xb0, 0xd9, 0x6b, 0x3b, 0x8f, 0x49, 0xfa, 0xe8, 0x0a, 0xa8, 0x01, 0xa9,
	0x9e, 0x31, 0xbb, 0x1a, 0x8d, 0x2d, 0x21, 0x55, 0xe2, 0xca, 0xd9, 0x5a, 0x39, 0x2a, 0xb2, 0x2b,
	0xbb, 0x00, 0xbc, 0x00, 0xa2, 0x7f, 0x20, 0xd3, 0x9c, 0x12, 0xdd, 0x26, 0xef, 0xeb, 0xb6, 0x90,
	0xa6, 0xa4, 0xad, 0x14, 0xe2, 0x0f, 0x06, 0x72, 0x01, 0xa0, 0x63, 0xef, 0x29, 0x96, 0x24, 0xaf,
	0x14, 0xa8, 0x08, 0x69, 0xd7, 0x4e, 0x91, 0x28, 0xdf, 0x1c, 0x5e, 0xca, 0xe8, 0x1d, 0x80, 0xf7,
	0x3d, 0x1e, 0x9a, 0x02, 0x47, 0x13, 0x3e, 0x8c, 0x9b, 0x70, 0x75, 0x05, 0x95, 0xc7, 0xf6, 0x74,
	0x8e, 0x7d, 0xbe, 0x8a, 0x2f, 0x60, 0x3b, 0xf4, 0x8c, 0x78, 0xe0, 0x3e, 0x92, 0x39, 0x4d, 0x30,
	0x83, 0x9d, 0x4f, 0x87, 0xc2, 0x1b, 0xdd, 0x98, 0x2d, 0xe6, 0xc0, 0x15, 0x9e, 0xb2, 0x87, 0x8c,
	0xf8, 0x85, 0x81, 0x82, 0x5b, 0xb2, 0x17, 0x12, 0x93, 0x4f, 0x33, 0x62, 0xd9, 0xcb, 0xc9, 0x61,
	0x7c, 0x93, 0x23, 0x40, 0x4a, 0xb5, 0xf5, 0xe1, 0x70, 0x59, 0xe0, 0x42, 0x5c, 0x0e, 0x01, 0xf7,
	0x0b, 0x43, 0x20, 0x62, 0x40, 0xa1, 0x14, 0x26, 0xc6, 0x1c, 0x3d, 0x87, 0x94, 0x87, 0xa5, 0x39,
	0x64, 0x6b, 0xe2, 0xfd, 0x7c, 0xe1, 0x05, 0x44, 0x1c, 0x42, 0x41, 0x22, 0x06, 0x59, 0x2b, 0x2b,
	0xba, 0x85, 0x77, 0x17, 0xb8, 0x07, 0x49, 0x4c, 0x74, 0xcb, 0x1c, 0xd3, 0x12, 0x33, 0xd8, 0x93,
	0xc4, 0x02, 0xa0, 0x50, 0x9c, 0x89, 0x31, 0x17, 0x5b, 0x80, 0x8e, 0x89, 0xed, 0xa9, 0xac, 0x45,
	0x6c, 0x9f, 0x77, 0x26, 0xe8, 0x3d, 0x90, 0x15, 0x4b, 0xc7, 0x7c, 0xa5, 0x10, 0x31, 0xf0, 0x01,
	0x6f, 0x0e, 0x3b, 0x2f, 0x21, 0xbd, 0x50, 0x08, 0x0c, 0x1d, 0xa7, 0x38, 0xf4, 0x2c, 0x31, 0xa2,
	0x01, 0x7b, 0xea, 0xd2, 0x27, 0x4d, 0xe3, 0xfe, 0x2c, 0xc3, 0xcb, 0xca, 0x46, 0x2d, 0x2b, 0xe7,
	0x5b, 0x56, 0x51, 0x83, 0xc2, 0x5a, 0xb4, 0xdf, 0xef, 0xf1, 0x57, 0x16, 0xfe, 0x5a, 0xb9, 0xf5,
	0x96, 0x3b, 0x56, 0x9f, 0x8f, 0x20, 0xa9, 0xda, 0xba, 0x3d, 0xb3, 0x68, 0x9b, 0xf3, 0xd1, 0xb7,
	0xa3, 0xd5, 0x3f, 0x56, 0x3a, 0x03, 0x55, 0xab, 0x6b, 0x7d, 0x15, 0x7b, 0x38, 0x3f, 0x4b, 0x5c,
	0x90, 0xa5, 0x8b, 0xc0, 0xaa, 0x27, 0x68, 0x6f, 0x1a, 0x11, 0xfe, 0xef, 0xa8, 0xe0, 0x4f, 0x2e,
	0xfd, 0x19, 0xec, 0xae, 0x47, 0x75, 0xfa, 0x71, 0x04, 0x49, 0x57, 0xf4, 0xda, 0x11, 0xff, 0xa6,
	0x7a, 0xb8, 0xca, 0x13, 0xd8, 0xf2, 0x6f, 0x38, 0x02, 0x48, 0xba, 0x04, 0xf2, 0x1b, 0x68, 0x0b,
	0xd2, 0x8d, 0xbe, 0xaa, 0x74, 0x64, 0x55, 0xe5, 0x19, 0x47, 0xea, 0xb5, 0xea, 0xda, 0xab, 0x2e,
	0x6e, 0xf3, 0x6c, 0xe5, 0x0d, 0xa0, 0xf5, 0xdf, 0x19, 0xb4, 0x03, 0xb9, 0x1e, 0xee, 0x4a, 0xfd,
	0xa6, 0x36, 0xe8, 0xbe, 0xed, 0xc8, 0x98, 0xdf, 0xa0, 0x0e, 0xfb, 0x8d, 0x96, 0xd2, 0xe4, 0x19,
	0xb4, 0x07, 0xe8, 0xa4, 0x7e, 0x2a, 0x0f, 0xea, 0x7d, 0xed, 0xa4, 0x8b, 0x95, 0xf3, 0xba, 0xa6,
	0x74, 0x3b, 0x3c, 0x5b, 0xa9, 0x40, 0x2e, 0xd0, 0x35, 0x94, 0x85, 0x94, 0xdc, 0xa9, 0x37, 0x5a,
	0xb2, 0xe4, 0xa6, 0x21, 0x29, 0xaa, 0x2b, 0x31, 0xb5, 0x6f, 0x09, 0xc8, 0x7b, 0xa5, 0xb4, 0xdd,
	0xca, 0x90, 0x09, 0xb9, 0xc0, 0x3d, 0x42, 0x07, 0x11, 0x34, 0xdc, 0x76, 0x3c, 0x8b, 0xfb, 0xf1,
	0x01, 0x0e, 0xed, 0x26, 0xe4, 0x02, 0x47, 0x24, 0x32, 0xe0, 0x6d, 0x67, 0x2d, 0x32, 0xe0, 0xfa,
	0x7d, 0x42, 0x23, 0xc8, 0xfa, 0x2e, 0x0a, 0x8a, 0x42, 0xaf, 0xdf, 0xb1, 0xe2, 0x7f, 0x71, 0xcd,
	0x9d, 0x50, 0x33, 0xd8, 0x0e, 0xad, 0x3e, 0x7a, 0x14, 0x6b, 0x1b, 0xfc, 0x47, 0xa9, 0x78, 0xf0,
	0x10, 0x88, 0x13, 0xf6, 0x33, 0xf0, 0xe1, 0x11, 0x47, 0xb5, 0x87, 0x6f, 0x61, 0xf1, 0xff, 0x07,
	0x61, 0x26, 0xc6, 0xbc, 0xb1, 0x73, 0xbe, 0xed, 0x19, 0xee, 0x7b, 0x86, 0x17, 0x49, 0xfa, 0x1f,
	0xee, 0xf1, 0xcf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x35, 0x82, 0xc6, 0xd5, 0xdc, 0x09, 0x00, 0x00,
}

// This following code was generated by tarsrpc
// Gernerated from project_manager.proto
type ProjectManager struct {
	s model.Servant
}

//SetServant is required by the servant interface.
func (obj *ProjectManager) SetServant(s model.Servant) {
	obj.s = s
}

//AddServant is required by the servant interface
func (obj *ProjectManager) AddServant(imp impProjectManager, objStr string) {
	tars.AddServant(obj, imp, objStr)
}

////AddServant adds servant  for the service with context
func (obj *ProjectManager) AddServantWithContext(imp impProjectManagerWithContext, objStr string) {
	tars.AddServantWithContext(obj, imp, objStr)
}

//TarsSetTimeout is required by the servant interface. t is the timeout in ms.
func (obj *ProjectManager) TarsSetTimeout(t int) {
	obj.s.TarsSetTimeout(t)
}

//TarsSetProtocol is required by the servant interface. t is the protocol.
func (obj *ProjectManager) TarsSetProtocol(p model.Protocol) {
	obj.s.TarsSetProtocol(p)
}

type impProjectManager interface {
	CreateProject(input CreateProjectRequest) (output CreateProjectReply, err error)
	DeleteProject(input DeleteProjectRequest) (output DeleteProjectReply, err error)
	GetProjects(input GetProjectsRequest) (output GetProjectsReply, err error)
	SetProjectStaff(input SetProjectStaffRequest) (output SetProjectStaffReply, err error)
	SetProjectPlugin(input SetProjectPluginRequest) (output SetProjectPluginReply, err error)
}

type impProjectManagerWithContext interface {
	CreateProject(ctx context.Context, input CreateProjectRequest) (output CreateProjectReply, err error)
	DeleteProject(ctx context.Context, input DeleteProjectRequest) (output DeleteProjectReply, err error)
	GetProjects(ctx context.Context, input GetProjectsRequest) (output GetProjectsReply, err error)
	SetProjectStaff(ctx context.Context, input SetProjectStaffRequest) (output SetProjectStaffReply, err error)
	SetProjectPlugin(ctx context.Context, input SetProjectPluginRequest) (output SetProjectPluginReply, err error)
}

//Dispatch is used to call the user implement of the defined method.
func (obj *ProjectManager) Dispatch(ctx context.Context, val interface{}, req *requestf.RequestPacket, resp *requestf.ResponsePacket, withContext bool) (err error) {
	input := tools.Int8ToByte(req.SBuffer)
	var output []byte
	funcName := req.SFuncName
	switch funcName {

	case "CreateProject":
		inputDefine := CreateProjectRequest{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res CreateProjectReply
		if withContext == false {
			imp := val.(impProjectManager)
			res, err = imp.CreateProject(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impProjectManagerWithContext)
			res, err = imp.CreateProject(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "DeleteProject":
		inputDefine := DeleteProjectRequest{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res DeleteProjectReply
		if withContext == false {
			imp := val.(impProjectManager)
			res, err = imp.DeleteProject(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impProjectManagerWithContext)
			res, err = imp.DeleteProject(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "GetProjects":
		inputDefine := GetProjectsRequest{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res GetProjectsReply
		if withContext == false {
			imp := val.(impProjectManager)
			res, err = imp.GetProjects(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impProjectManagerWithContext)
			res, err = imp.GetProjects(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "SetProjectStaff":
		inputDefine := SetProjectStaffRequest{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res SetProjectStaffReply
		if withContext == false {
			imp := val.(impProjectManager)
			res, err = imp.SetProjectStaff(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impProjectManagerWithContext)
			res, err = imp.SetProjectStaff(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "SetProjectPlugin":
		inputDefine := SetProjectPluginRequest{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res SetProjectPluginReply
		if withContext == false {
			imp := val.(impProjectManager)
			res, err = imp.SetProjectPlugin(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impProjectManagerWithContext)
			res, err = imp.SetProjectPlugin(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	default:
		return fmt.Errorf("func mismatch")
	}
	var _status map[string]string
	s, ok := current.GetResponseStatus(ctx)
	if ok && s != nil {
		_status = s
	}
	var _context map[string]string
	c, ok := current.GetResponseContext(ctx)
	if ok && c != nil {
		_context = c
	}
	*resp = requestf.ResponsePacket{
		IVersion:     1,
		CPacketType:  0,
		IRequestId:   req.IRequestId,
		IMessageType: 0,
		IRet:         0,
		SBuffer:      tools.ByteToInt8(output),
		Status:       _status,
		SResultDesc:  "",
		Context:      _context,
	}
	return nil
}

// CreateProject is client rpc method as defined
func (obj *ProjectManager) CreateProject(input CreateProjectRequest, _opt ...map[string]string) (output CreateProjectReply, err error) {
	ctx := context.Background()
	return obj.CreateProjectWithContext(ctx, input, _opt...)
}

// CreateProjectWithContext is client rpc method as defined
func (obj *ProjectManager) CreateProjectWithContext(ctx context.Context, input CreateProjectRequest, _opt ...map[string]string) (output CreateProjectReply, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "CreateProject", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// DeleteProject is client rpc method as defined
func (obj *ProjectManager) DeleteProject(input DeleteProjectRequest, _opt ...map[string]string) (output DeleteProjectReply, err error) {
	ctx := context.Background()
	return obj.DeleteProjectWithContext(ctx, input, _opt...)
}

// DeleteProjectWithContext is client rpc method as defined
func (obj *ProjectManager) DeleteProjectWithContext(ctx context.Context, input DeleteProjectRequest, _opt ...map[string]string) (output DeleteProjectReply, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "DeleteProject", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// GetProjects is client rpc method as defined
func (obj *ProjectManager) GetProjects(input GetProjectsRequest, _opt ...map[string]string) (output GetProjectsReply, err error) {
	ctx := context.Background()
	return obj.GetProjectsWithContext(ctx, input, _opt...)
}

// GetProjectsWithContext is client rpc method as defined
func (obj *ProjectManager) GetProjectsWithContext(ctx context.Context, input GetProjectsRequest, _opt ...map[string]string) (output GetProjectsReply, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "GetProjects", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// SetProjectStaff is client rpc method as defined
func (obj *ProjectManager) SetProjectStaff(input SetProjectStaffRequest, _opt ...map[string]string) (output SetProjectStaffReply, err error) {
	ctx := context.Background()
	return obj.SetProjectStaffWithContext(ctx, input, _opt...)
}

// SetProjectStaffWithContext is client rpc method as defined
func (obj *ProjectManager) SetProjectStaffWithContext(ctx context.Context, input SetProjectStaffRequest, _opt ...map[string]string) (output SetProjectStaffReply, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "SetProjectStaff", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// SetProjectPlugin is client rpc method as defined
func (obj *ProjectManager) SetProjectPlugin(input SetProjectPluginRequest, _opt ...map[string]string) (output SetProjectPluginReply, err error) {
	ctx := context.Background()
	return obj.SetProjectPluginWithContext(ctx, input, _opt...)
}

// SetProjectPluginWithContext is client rpc method as defined
func (obj *ProjectManager) SetProjectPluginWithContext(ctx context.Context, input SetProjectPluginRequest, _opt ...map[string]string) (output SetProjectPluginReply, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "SetProjectPlugin", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}
